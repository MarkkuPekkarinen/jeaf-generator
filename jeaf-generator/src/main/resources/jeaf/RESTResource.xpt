«EXTENSION java::Naming»
«EXTENSION java::GeneratorCommons»
«EXTENSION java::OpenAPIFunctions»
«EXTENSION entity::ModelProperties»

«IMPORT uml»
«IMPORT JMM»

«DEFINE RESTResourceClass FOR RESTResource»
«FILE packagePath()+"/"+name+"Resource.java" GenBase»
«getFileHeader()»
package «packageName()»;

«this.getJavadoc()»
«IF isRESTLibrarySpringWebMVC()»
	«IF path.length > 0 || consumes.size > 0 || produces.size > 0»
	@org.springframework.web.bind.annotation.RequestMapping(
	«IF path.length > 0»path = "«path»" 
	      «IF consumes.size > 0 || produces.size > 0 », 
	      «ENDIF»
	«ENDIF»
	«IF consumes.size > 0»
	 	consumes = {«FOREACH consumes AS mediaType SEPARATOR ","»"«mediaType.toOpenAPIContentType()»"«ENDFOREACH»}
		«IF produces.size > 0»,«ENDIF»
	«ENDIF»
	«IF produces.size > 0»
	 	produces = {«FOREACH produces AS mediaType SEPARATOR ","»"«mediaType.toOpenAPIContentType()»"«ENDFOREACH»}
	«ENDIF»
	)
	«ENDIF»
	@org.springframework.web.bind.annotation.RestController
«ELSE»
	«IF path.length > 0»@javax.ws.rs.Path("«path»")«ENDIF»
	«IF consumes.size > 0»@javax.ws.rs.Consumes(«IF consumes.size > 1»{«ENDIF»«FOREACH consumes AS mediaType SEPARATOR ","»javax.ws.rs.core.MediaType.«mediaType»«ENDFOREACH»«IF consumes.size > 1»}«ENDIF»)«ENDIF»
	«IF produces.size > 0»@javax.ws.rs.Produces(«IF produces.size > 1»{«ENDIF»«FOREACH produces AS mediaType SEPARATOR ","»javax.ws.rs.core.MediaType.«mediaType»«ENDFOREACH»«IF produces.size > 1»}«ENDIF»)«ENDIF»
«ENDIF»
«EXPAND java::Helper::GenerateDeprecationAnnotation -»
public class «name»Resource {
	«IF isTargetRuntimeJEAF() == false»
	@javax.inject.Inject
	private «this.fqn()» «name.toFirstLower()»;
	«ENDIF»
	«EXPAND RESTOperationImpl FOREACH ownedOperation.typeSelect(RESTOperation)»
	
	/**
	 * Method returns reference to service to which all REST requests will be delegated.
	 *
	 * @return «this.name» Service instance to which all requests will be delegated.
	 */
	private «this.fqn()» get«name»() {
	  «IF isTargetRuntimeJEAF()»
	  return com.anaptecs.jeaf.core.api.JEAF.getService(«this.fqn()».class);
	  «ELSE»
	  return «name.toFirstLower()»;
	  «ENDIF»
	}
}
«ENDFILE»
«ENDDEFINE»


«DEFINE RESTOperationImpl FOR RESTOperation»
	«IF isRESTLibrarySpringWebMVC()»
		«EXPAND SpringRESTControllerOperationImpl»
	«ELSE»
		«IF async == false»
			«EXPAND SyncJAXRSOperationImpl FOR this»
		«ELSE»
			«EXPAND AsyncJAXRSOperationImpl FOR this»
		«ENDIF»
	«ENDIF»	
«ENDDEFINE»

«DEFINE SyncJAXRSOperationImpl FOR RESTOperation»
	/**
	 * {@link «this.getOwningClass().fqn()»#«name»()}
	 */
	«IF path.length > 0»@javax.ws.rs.Path("«path»")«ENDIF»
	«EXPAND HTTPMethods»
	«IF consumes.size > 0»@javax.ws.rs.Consumes(«IF consumes.size > 1»{«ENDIF»«FOREACH consumes AS mediaType SEPARATOR ","»javax.ws.rs.core.MediaType.«mediaType»«ENDFOREACH»«IF consumes.size > 1»}«ENDIF»)«ENDIF»
	«IF produces.size > 0»@javax.ws.rs.Produces(«IF produces.size > 1»{«ENDIF»«FOREACH produces AS mediaType SEPARATOR ","»javax.ws.rs.core.MediaType.«mediaType»«ENDFOREACH»«IF produces.size > 1»}«ENDIF»)«ENDIF»
	«EXPAND java::Helper::GenerateDeprecationAnnotation-»
	«EXPAND java::Helper::GenerateDeprecationAnnotation FOR this.getReturnResult()-»
	public javax.ws.rs.core.Response  «name» («EXPAND RESTParameterSignature FOR this»)«getThrownExceptionsAsString()»{
	  «this.getOwningClass().fqn()» lService = this.get«this.getOwningClass().name»();
	  «IF getReturnTypeName() != "void"»
	  «getReturnTypeName()» lResult = lService.«this.name»(«this.asParameterListNames()»);
	  return javax.ws.rs.core.Response.status(«EXPAND StatusCode»).entity(lResult).build();
	  «ELSE»
	  lService.«this.name»(«this.asParameterListNames()»);
	  return javax.ws.rs.core.Response.status(«EXPAND StatusCode»).build();
	  «ENDIF»
	}
«ENDDEFINE»

«DEFINE SpringRESTControllerOperationImpl FOR RESTOperation»
	/**
	 * {@link «this.getOwningClass().fqn()»#«name»()}
	 */
	@org.springframework.web.bind.annotation.RequestMapping(
	«IF path.length > 0»path = "«path»",«ENDIF»
	«IF consumes.size > 0»consumes = {«FOREACH consumes AS mediaType SEPARATOR ","»"«mediaType.toOpenAPIContentType()»"«ENDFOREACH»},«ENDIF»
	«IF produces.size > 0»produces = {«FOREACH produces AS mediaType SEPARATOR ","»"«mediaType.toOpenAPIContentType()»"«ENDFOREACH»},«ENDIF»
	method = { «FOREACH httpMethods AS httpMethod SEPARATOR ","»org.springframework.web.bind.annotation.RequestMethod.«httpMethod»«ENDFOREACH»}
	)
	«EXPAND java::Helper::GenerateDeprecationAnnotation-»
	«EXPAND java::Helper::GenerateDeprecationAnnotation FOR this.getReturnResult()-»
	public «getReturnTypeName()»  «name» («EXPAND SpringRESTParameterSignature FOR this»)«getThrownExceptionsAsString()»{
	  «IF this.hasBeanParameters()»
	  // Convert parameters into object as "BeanParams" are not supported by Spring Web. This way we do not pollute the service interface but "only" our REST controller.
	  «ENDIF»
	  «FOREACH this.getBeanParams() AS beanParam»
	  «beanParam.getTypeName()».Builder lBuilder = «beanParam.getTypeName()».Builder.newBuilder();
	  «FOREACH beanParam.type.getAllAttributesFromHierarchy() AS attribute»
	  lBuilder.«attribute.asSetter()»(«attribute.asParameter()»);
	  «ENDFOREACH»
	  «beanParam.getTypeName()» «beanParam.name» = lBuilder.build();
	  «ENDFOREACH»
      // Get Spring service and delegate call.
	  «this.getOwningClass().fqn()» lService = this.get«this.getOwningClass().name»();
	  «IF getReturnTypeName() != "void"»
	  return lService.«this.name»(«this.asParameterListNames()»);
	  «ELSE»
	  lService.«this.name»(«this.asParameterListNames()»);
	  «ENDIF»
	}
«ENDDEFINE»

«DEFINE AsyncJAXRSOperationImpl FOR RESTOperation»
	/**
	 * {@link «this.getOwningClass().fqn()»#«name»()}
	 */
	«IF path.length > 0»@javax.ws.rs.Path("«path»")«ENDIF»
	«EXPAND HTTPMethods»
	«IF consumes.size > 0»@javax.ws.rs.Consumes(«IF consumes.size > 1»{«ENDIF»«FOREACH consumes AS mediaType SEPARATOR ","»javax.ws.rs.core.MediaType.«mediaType»«ENDFOREACH»«IF consumes.size > 1»}«ENDIF»)«ENDIF»
	«IF produces.size > 0»@javax.ws.rs.Produces(«IF produces.size > 1»{«ENDIF»«FOREACH produces AS mediaType SEPARATOR ","»javax.ws.rs.core.MediaType.«mediaType»«ENDFOREACH»«IF produces.size > 1»}«ENDIF»)«ENDIF»
	«EXPAND java::Helper::GenerateDeprecationAnnotation -»
	«EXPAND java::Helper::GenerateDeprecationAnnotation FOR this.getReturnResult()-»
	public void  «name» (@javax.ws.rs.container.Suspended javax.ws.rs.container.AsyncResponse pAsyncResponse, @javax.ws.rs.core.Context javax.servlet.http.HttpServletRequest pRequest «IF this.hasInputParameters()»,«ENDIF» «EXPAND JEAFOperation::ParameterSignature FOR this»)«getThrownExceptionsAsString()»{
	    // Lookup workload manager that takes care that the system will have an optimal throughput.
	    com.anaptecs.jeaf.workload.api.WorkloadManager lWorkloadManager = com.anaptecs.jeaf.workload.api.Workload.getWorkloadManager();
	
	    // Prepare meta information about the request.
	    String lEndpointURL = pRequest.getServletPath() + pRequest.getPathInfo();
	    com.anaptecs.jeaf.workload.api.rest.RESTRequestType lRequestInfo = new com.anaptecs.jeaf.workload.api.rest.RESTRequestType(lEndpointURL, pRequest.getMethod());

     	// Lookup service that will be called later during async processing of the request
     	«this.getOwningClass().fqn()» lService = this.get«this.getOwningClass().name»();
     	
	    // Hand over current request to workload manager. Depending on its strategy and the current workload the request will be either be directly executed, first queued or rejected.
	    lWorkloadManager.execute(lRequestInfo, new com.anaptecs.jeaf.workload.api.rest.RESTWorkloadErrorHandler(pAsyncResponse), new Runnable() {
			@Override
			public void run( ) {
			    try {
					«IF getReturnTypeName() != "void"»
					«getReturnTypeName()» lResult = lService.«this.name»(«this.asParameterListNames()»);
					javax.ws.rs.core.Response lResponseObject = javax.ws.rs.core.Response.status(«EXPAND StatusCode»).entity(lResult).build();
					«ELSE»
					lService.«this.name»(«this.asParameterListNames()»);
					javax.ws.rs.core.Response lResponseObject = javax.ws.rs.core.Response.ok().status(«EXPAND StatusCode»).build();
					«ENDIF»
			
					// Due to the asynchronous processing of the requests, the response can not be returned as return value. Therefore we make use of the defined JAX-RS mechanisms.
					pAsyncResponse.resume(lResponseObject);
			    }
				// All kinds of exceptions have to be reported to the client. Due to the asynchronous processing we have to
				// catch them here and return them to the client via class AsyncResponse.
				catch (RuntimeException e) {
					pAsyncResponse.resume(e);
				}
			}
		});
	}
«ENDDEFINE»

«DEFINE StatusCode FOR RESTOperation»
	«IF statusCode != null && statusCode.name.length > 0»
		javax.ws.rs.core.Response.Status.«getJAXRSStatusCodeName(statusCode.name)»
	«ELSE»
		javax.ws.rs.core.Response.Status.OK»
	«ENDIF»
«ENDDEFINE»

«DEFINE HTTPMethods FOR RESTOperation»
	«FOREACH httpMethods AS method»@javax.ws.rs.«method»«ENDFOREACH»
«ENDDEFINE»

«DEFINE RESTParameterSignature FOR Operation»
  «EXPAND RESTParameterDefinition FOREACH ownedParameter.select(e| e.isInputParameter()) SEPARATOR ", "» 
«ENDDEFINE»

«DEFINE RESTParameterDefinition FOR Parameter»
  «IF this.isStereotypeApplied("PathParam") -»
  @javax.ws.rs.PathParam("«EXPAND java::OpenAPI::RESTParamName FOR this»")
  «ENDIF-»
  «IF this.isStereotypeApplied("HeaderParam") -»
  @javax.ws.rs.HeaderParam("«EXPAND java::OpenAPI::RESTParamName FOR this»")
  «ENDIF-»
  «IF this.isStereotypeApplied("QueryParam") -»
  @javax.ws.rs.QueryParam("«EXPAND java::OpenAPI::RESTParamName FOR this»")
  «ENDIF-»
  «IF this.isStereotypeApplied("CookieParam") -»
  @javax.ws.rs.CookieParam("«EXPAND java::OpenAPI::RESTParamName FOR this»")
  «ENDIF-»
  «IF this.isStereotypeApplied("BeanParam") -»
  @javax.ws.rs.BeanParam 
  «ENDIF-»
  «IF this.type.isStereotypeApplied("BeanParam") -»
  @javax.ws.rs.BeanParam
  «ENDIF-»
  «IF this.isParamJEAFEnumeration() && this.hasDefaultValueForEnum()»
  @javax.ws.rs.DefaultValue("«this.getDefaultValueForEnum()»")
  «ENDIF»
  «IF this.type.isBasicType() && this.hasDefaultValueForBasicType()»
  @javax.ws.rs.DefaultValue("«this.getDefaultValueForBasicType()»")
  «ENDIF»

  «EXPAND java::Helper::GenerateDeprecationAnnotation»
  «this.getTypeName()» «this.name»
«ENDDEFINE»

«DEFINE SpringRESTParameterSignature FOR Operation»
  «EXPAND SpringRESTParameterDefinition FOREACH ownedParameter.select(e| e.isInputParameter()) SEPARATOR ", "» 
«ENDDEFINE»

«DEFINE SpringRESTParameterDefinition FOR Parameter»
  «IF this.isStereotypeApplied("PathParam") -»
  @org.springframework.web.bind.annotation.PathVariable(name = "«EXPAND java::OpenAPI::RESTParamName FOR this»", required = «this.isRequired()» «IF this.isParamJEAFEnumeration() && this.hasDefaultValueForEnum()», defaultValue = "«this.getDefaultValueForEnum()»"«ENDIF» «IF this.type.isBasicType() && this.hasDefaultValueForBasicType()», defaultValue = "«this.getDefaultValueForBasicType()»"«ENDIF»)
  «ENDIF-»
  «IF this.isStereotypeApplied("HeaderParam") -»
  @org.springframework.web.bind.annotation.RequestHeader(name = "«EXPAND java::OpenAPI::RESTParamName FOR this»", required = «this.isRequired()»«IF this.isParamJEAFEnumeration() && this.hasDefaultValueForEnum()», defaultValue = "«this.getDefaultValueForEnum()»"«ENDIF» «IF this.type.isBasicType() && this.hasDefaultValueForBasicType()», defaultValue = "«this.getDefaultValueForBasicType()»"«ENDIF»)
  «ENDIF-»
  «IF this.isStereotypeApplied("QueryParam") -»
  @org.springframework.web.bind.annotation.RequestParam(name = "«EXPAND java::OpenAPI::RESTParamName FOR this»", required = «this.isRequired()»«IF this.isParamJEAFEnumeration() && this.hasDefaultValueForEnum()», defaultValue = "«this.getDefaultValueForEnum()»"«ENDIF» «IF this.type.isBasicType() && this.hasDefaultValueForBasicType()», defaultValue = "«this.getDefaultValueForBasicType()»"«ENDIF»))
  «ENDIF-»
  «IF this.isStereotypeApplied("CookieParam") -»
  @org.springframework.web.bind.annotation.CookieValue(name = "«EXPAND java::OpenAPI::RESTParamName FOR this»", required = «this.isRequired()»«IF this.isParamJEAFEnumeration() && this.hasDefaultValueForEnum()», defaultValue = "«this.getDefaultValueForEnum()»"«ENDIF» «IF this.type.isBasicType() && this.hasDefaultValueForBasicType()», defaultValue = "«this.getDefaultValueForBasicType()»"«ENDIF»))
  «ENDIF-»
  «IF this.isStereotypeApplied("BeanParam") -»
  	«EXPAND ProcessBeanParam FOR ((Class)this.type)»
  «ENDIF-»
  «IF this.type.isStereotypeApplied("BeanParam") -»
  	«EXPAND ProcessBeanParam FOR ((Class)this.type)»
  «ENDIF-»

  «EXPAND java::Helper::GenerateDeprecationAnnotation»
  «IF this.isBeanParamater() == false»
  	«this.getTypeName()» «this.name»
  «ENDIF»
«ENDDEFINE»

«DEFINE ProcessBeanParam FOR Class»
	«EXPAND SpringRESTBeanParameterDefinition FOREACH this.getAllAttributesFromHierarchy() SEPARATOR ","»
«ENDDEFINE»

«DEFINE SpringRESTBeanParameterDefinition FOR Property»
  «IF this.isStereotypeApplied("PathParam") -»
  @org.springframework.web.bind.annotation.PathVariable(name = "«EXPAND java::OpenAPI::RESTParamName FOR this»", required = «this.isRequiredProperty()» «IF this.hasInitValue()», defaultValue = "«this.initValue()»"«ENDIF»)
  «ENDIF-»
  «IF this.isStereotypeApplied("HeaderParam") -»
  @org.springframework.web.bind.annotation.RequestHeader(name = "«EXPAND java::OpenAPI::RESTParamName FOR this»", required = «this.isRequiredProperty()»«IF this.hasInitValue()», defaultValue = "«this.initValue()»"«ENDIF»)
  «ENDIF-»
  «IF this.isStereotypeApplied("QueryParam") -»
  @org.springframework.web.bind.annotation.RequestParam(name = "«EXPAND java::OpenAPI::RESTParamName FOR this»", required = «this.isRequiredProperty()»«IF this.hasInitValue()», defaultValue = "«this.initValue()»"«ENDIF»)
  «ENDIF-»
  «IF this.isStereotypeApplied("CookieParam") -»
  @org.springframework.web.bind.annotation.CookieValue(name = "«EXPAND java::OpenAPI::RESTParamName FOR this»", required = «this.isRequiredProperty()»«IF this.hasInitValue()», defaultValue = "«this.initValue()»"«ENDIF»)
  «ENDIF-»

  «EXPAND java::Helper::GenerateDeprecationAnnotation»
  «this.fqn()» «this.asParameter()»
«ENDDEFINE»

