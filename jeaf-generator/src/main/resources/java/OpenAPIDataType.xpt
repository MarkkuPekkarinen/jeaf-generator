«EXTENSION java::Naming»
«EXTENSION java::GeneratorCommons»
«EXTENSION java::OpenAPIFunctions»

«IMPORT uml»
«IMPORT JMM»

«DEFINE GenerateOpenAPIDataType(OpenAPI3Specification spec, Property ownerAttribute) FOR OpenAPIDataType -»
  «LET this.ownedAttribute.get(0) AS attribute -»
    «IF this.inline == true -»
          «IF attribute.hasComment()-»
          description: >-
            «attribute.getCommentForOpenAPIDescription("            ")»
          «ENDIF-»
          «IF ownerAttribute.isMultivalued() == false-»
          type: «attribute.type.getOpenAPIType(spec)»
              «IF attribute.hasOpenAPIFormatForProperty()-»
          format: «attribute.getOpenAPIFormatForProperty()»
              «ENDIF-»
              «IF attribute.hasPatternForProperty() -»
          pattern: '«attribute.getPatternForProperty()»'
              «ENDIF-»
          «IF attribute.defaultValue != null -»
          default: «attribute.defaultValue.stringValue().replaceAll("\"", "'")»
          «ENDIF-»
          «EXPAND java::OpenAPIRestrictions::OpenAPIRestrictions("    ") FOR attribute-»    
              «IF attribute.isDeprecated() || ownerAttribute.isDeprecated() -»
          deprecated: true
              «ENDIF-»
              «IF attribute.hasExample()-»
                «IF ((Example) attribute).exampleValue.length > 0-»
          example: «((Example) attribute).exampleValue»
                «ENDIF-»
              «ENDIF-»
          «ELSE-»
          type: array
          items:
            type: «attribute.type.getOpenAPIType(spec)»
              «IF attribute.hasOpenAPIFormatForProperty()-»
            format: «attribute.getOpenAPIFormatForProperty()»
              «ENDIF-»
              «IF attribute.hasPatternForProperty() -»
            pattern: '«attribute.getPatternForProperty()»'
              «ENDIF-»
              «IF attribute.defaultValue != null -»
            default: «attribute.defaultValue.stringValue().replaceAll("\"", "'")»
              «ENDIF-»
            «EXPAND java::OpenAPIRestrictions::OpenAPIRestrictions("      ") FOR attribute-»
            «IF attribute.hasExample()-»
              «IF ((Example) attribute).exampleValue.length > 0-»
            example: «((Example) attribute).exampleValue»
              «ENDIF-»
            «ENDIF-»
            «EXPAND java::OpenAPIRestrictions::OpenAPIRestrictions("    ") FOR ownerAttribute-»
              «IF attribute.isDeprecated() || ownerAttribute.isDeprecated() -»
            deprecated: true
              «ENDIF-»
          «ENDIF-»
          «IF attribute.isNullable() == false -»
          nullable: «attribute.isNullable()»
          «ENDIF-»  
          «IF attribute.isReadOnly()  -»
          readOnly: «attribute.isReadOnly()»
          «ENDIF-»  
          «IF attribute.isWriteOnly() -»
          writeOnly: «attribute.isWriteOnly()»
          «ENDIF-»  
            «IF ownerAttribute.hasExample()-»
              «IF ((Example) ownerAttribute).exampleValue.length > 0-»
          example: «((Example) ownerAttribute).exampleValue»
              «ENDIF-»
            «ENDIF-»
    «ELSE-»
    «IF suppressClassNameCommentInOpenAPISpec() == false -»
    # «this.fqn()»
    «ENDIF-»
    «this.name»:
      type: «attribute.type.getOpenAPIType(spec)»
      «IF attribute.hasOpenAPIFormatForProperty()-»
      format: «attribute.getOpenAPIFormatForProperty()»
      «ENDIF-»
      «IF attribute.hasPatternForProperty() -»
      pattern: '«attribute.getPatternForProperty()»'
      «ENDIF-»
      «IF this.hasComment()-»
      description: >-
        «this.getCommentForOpenAPIDescription("        ")»
      «ENDIF-»
      «IF attribute.defaultValue != null -»
      default: «attribute.defaultValue.stringValue().replaceAll("\"", "'")»
      «ENDIF-»
      «EXPAND java::OpenAPIRestrictions::OpenAPIRestrictions("") FOR attribute-»    
      «IF attribute.isDeprecated() -»
      deprecated: true
      «ENDIF-»
      «IF attribute.isNullable() == false -»
      nullable: «attribute.isNullable()»
      «ENDIF-»  
      «IF attribute.isReadOnly()  -»
      readOnly: «attribute.isReadOnly()»
      «ENDIF-»  
      «IF attribute.isWriteOnly() -»
      writeOnly: «attribute.isWriteOnly()»
      «ENDIF-»
      «IF attribute.hasExample()-»
        «IF ((Example) attribute).exampleValue.length > 0-»
      example: «((Example) attribute).exampleValue»
        «ENDIF-»
      «ENDIF-»
    «ENDIF-»         
  «ENDLET -»
«ENDDEFINE»

«DEFINE GenerateOpenAPIDataTypeForPath(OpenAPI3Specification spec, Parameter param, String indent) FOR OpenAPIDataType -»
«indent»            «LET this.ownedAttribute.get(0) AS attribute -»
                «IF attribute.hasComment()-»
«indent»            description: >-
«indent»              «attribute.getCommentForOpenAPIDescription("                  ")»
                «ENDIF-»
                «IF param.isMultivalued() == false-»
«indent»            type: «attribute.type.getOpenAPIType(spec)»
                  «IF attribute.hasOpenAPIFormatForProperty()-»
«indent»            format: «attribute.getOpenAPIFormatForProperty()»
                  «ENDIF-»
                  «IF attribute.hasPatternForProperty() -»
«indent»            pattern: '«attribute.getPatternForProperty()»'
                  «ENDIF-»
                  «IF attribute.defaultValue != null -»
«indent»            default: «attribute.defaultValue.stringValue().replaceAll("\"", "'")»
                  «ENDIF-»
                «EXPAND java::OpenAPIRestrictions::OpenAPIRestrictions("          ") FOR attribute-»    
                  «IF attribute.isDeprecated() || param.isDeprecated() -»
«indent»            deprecated: true
                  «ENDIF-»
                  «IF attribute.hasExample()-»
                    «IF ((Example) attribute).exampleValue.length > 0-»
«indent»            example: «((Example) attribute).exampleValue»
                    «ENDIF-»
                  «ENDIF-»
                «ELSE-»
«indent»            type: array
«indent»            items:
«indent»              type: «attribute.type.getOpenAPIType(spec)»
                  «IF attribute.hasOpenAPIFormatForProperty()-»
«indent»              format: «attribute.getOpenAPIFormatForProperty()»
                  «ENDIF-»
                  «IF attribute.hasPatternForProperty() -»
«indent»              pattern: '«attribute.getPatternForProperty()»'
                  «ENDIF-»
                  «EXPAND java::OpenAPIRestrictions::OpenAPIRestrictions("            ") FOR attribute-»
                  «IF attribute.hasExample()-»
                  «IF ((Example) attribute).exampleValue.length > 0-»
«indent»              example: «((Example) attribute).exampleValue»
                  «ENDIF-»
                  «ENDIF-»
                  «EXPAND java::OpenAPIRestrictions::OpenAPIRestrictions("          ") FOR param-»
                  «IF attribute.isDeprecated() || param.isDeprecated() -»
«indent»            deprecated: true
                  «ENDIF-»
                «ENDIF-»
                «IF attribute.isNullable() == false -»
«indent»            nullable: «attribute.isNullable()»
                «ENDIF-»  
                «IF attribute.isReadOnly()  -»
«indent»            readOnly: «attribute.isReadOnly()»
                «ENDIF-»  
                «IF attribute.isWriteOnly() -»
«indent»            writeOnly: «attribute.isWriteOnly()»
                «ENDIF-»  
                «IF param.hasExample()-»
                «IF ((Example) param).exampleValue.length > 0-»
«indent»            example: «((Example) param).exampleValue»
                «ENDIF-»
                «ENDIF-»
                «ENDLET -»
«ENDDEFINE»

«DEFINE GenerateDataTypeSerializer FOR OpenAPIDataType -»
	«FILE packagePath() + "/serializers/" + name +"Serializer.java" src_gen»
		«getFileHeader()»
		package «this.packageName()».serializers;
		
		«EXPAND java::Helper::GenerateDeprecationAnnotation-»
		/**
		 * Class implements a JSON / Jackson serializer for class «name».
		 */
		public class «name»Serializer extends com.fasterxml.jackson.databind.JsonSerializer<«name»> {
		  @Override
		  public void serialize( «this.fqn()» pObject, com.fasterxml.jackson.core.JsonGenerator pGenerator, com.fasterxml.jackson.databind.SerializerProvider pSerializers )
		    throws java.io.IOException {
		    
		  «LET this.ownedAttribute.get(0) AS attr»
		    // Write value directly to JSON and avoid nesting object structures
		    «IF attr.type.isStringType()»
		    pGenerator.writeString(pObject.«attr.asGetter()»());
		    «ELSE»«IF attr.type.isBooleanType()»
		    pGenerator.writeBoolean(pObject.«attr.asGetter()»());
		    «ELSE»
		    pGenerator.writeNumber(pObject.«attr.asGetter()»());
		    «ENDIF»		    
		    «ENDIF»
		  «ENDLET»
		  }
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE GenerateDataTypeDeserializer FOR OpenAPIDataType -»
	«FILE packagePath() + "/serializers/" + name +"Deserializer.java" src_gen»
		«getFileHeader()»
		package «this.packageName()».serializers;
		
		«EXPAND java::Helper::GenerateDeprecationAnnotation-»
		/**
		 * Class implements a JSON / Jackson deserializer for class «name».
		 */
		public class «name»Deserializer extends com.fasterxml.jackson.databind.JsonDeserializer<«this.fqn()»> {

		@Override
		public «this.fqn()» deserialize( com.fasterxml.jackson.core.JsonParser pParser, com.fasterxml.jackson.databind.DeserializationContext pContext ) throws java.io.IOException {
			// Parse JSON content.
			com.fasterxml.jackson.databind.JsonNode lNode = pParser.getCodec().readTree(pParser);
		
		    // We expect that data types are always serialized as plain text which will result in a TextNode.
		    «LET this.ownedAttribute.get(0) AS attr»
			    if (lNode instanceof com.fasterxml.jackson.databind.node.TextNode) {
			    «IF attr.type.isBooleanType()»
		        return «this.fqn()».builder().«attr.asSetter()»(lNode.asBoolean()).build();
		        «ENDIF»
			    «IF attr.type.isStringType()»
		        return «this.fqn()».builder().«attr.asSetter()»(lNode.asText()).build();
		        «ENDIF»
		        «IF attr.type.isByteType()»
		        return «this.fqn()».builder().«attr.asSetter()»((byte)lNode.asInt()).build();
		        «ENDIF»
		        «IF attr.type.isShortType()»
		        return «this.fqn()».builder().«attr.asSetter()»((short)lNode.asInt()).build();
		        «ENDIF»
		        «IF attr.type.isIntegerType()»
		        return «this.fqn()».builder().«attr.asSetter()»(lNode.asInt()).build();
		        «ENDIF»
		        «IF attr.type.isLongType()»
		        return «this.fqn()».builder().«attr.asSetter()»(lNode.asLong()).build();
		        «ENDIF»
		        «IF attr.type.isFloatType()»
		        return «this.fqn()».builder().«attr.asSetter()»((float)lNode.asDouble()).build();
		        «ENDIF»
		        «IF attr.type.isDoubleType()»
		        return «this.fqn()».builder().«attr.asSetter()»(lNode.asDouble()).build();
		        «ENDIF»
		    }
		    // Node is not a TextNode
		    else {
		      «IF isTargetRuntimeJEAF()»
		      throw new com.anaptecs.jeaf.xfun.api.errorhandling.JEAFSystemException(com.anaptecs.jeaf.json.api.JSONMessages.UNEXPECTED_NODE_TYPE_FOR_DESERIALIZATION, «this.fqn()».class.getName(), lNode.toString(), lNode.getClass().getName());
		      «ELSE»
		      throw new java.io.IOException("Unable to deserialize object of type «this.fqn()». Expected text node but received other type of JSON content. Current JSON node ''" + lNode.toString() + "'' is of type ''"+ lNode.getClass().getName() + "''.");
		      «ENDIF»
		    }
		    «ENDLET»
		}
	}
	«ENDFILE»
«ENDDEFINE»
