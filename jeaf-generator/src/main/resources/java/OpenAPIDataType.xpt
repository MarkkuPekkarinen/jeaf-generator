«EXTENSION java::Naming»
«EXTENSION java::GeneratorCommons»
«EXTENSION java::OpenAPIFunctions»

«IMPORT uml»
«IMPORT JMM»

«DEFINE GenerateOpenAPIDataType(OpenAPI3Specification spec, Property ownerAttribute, String indentation) FOR OpenAPIDataType -»
  «LET this.ownedAttribute.get(0) AS attribute -»
    «IF this.inline == true -»
          «IF attribute.hasComment()-»
          description: >-
            «attribute.getCommentForOpenAPIDescription("            ")»
          «ENDIF-»
          «IF ownerAttribute.isMultivalued() == false-»
          «IF this.compositeDataType == true -»
«indentation»          type: string
              «IF ownerAttribute.isDeprecated() -»
«indentation»          deprecated: true
              «ENDIF-»
          «ELSE-»
«indentation»          type: «attribute.type.getOpenAPIType(spec)»
              «IF attribute.hasOpenAPIFormatForProperty()-»
«indentation»          format: «attribute.getOpenAPIFormatForProperty()»
              «ENDIF-»
              «IF attribute.hasPatternForProperty() -»
«indentation»          pattern: '«attribute.getPatternForProperty()»'
              «ENDIF-»
          «IF attribute.defaultValue != null -»
«indentation»          default: «attribute.defaultValue.stringValue().replaceAll("\"", "'")»
          «ENDIF-»
          «EXPAND java::OpenAPIRestrictions::OpenAPIRestrictions("    ") FOR attribute-»    
              «IF attribute.isDeprecated() || ownerAttribute.isDeprecated() -»
«indentation»          deprecated: true
              «ENDIF-»
              «IF attribute.hasExample()-»
                «IF ((Example) attribute).exampleValue.length > 0-»
«indentation»          example: «((Example) attribute).exampleValue»
                «ENDIF-»
              «ENDIF-»
          «ENDIF-»
          «ELSE-»
«indentation»          type: array
«indentation»          items:
            «IF this.compositeDataType == true -»
«indentation»            type: string
                «IF ownerAttribute.isDeprecated() -»
«indentation»            deprecated: true
                «ENDIF-»
            «ELSE-»
«indentation»            type: «attribute.type.getOpenAPIType(spec)»
              «IF attribute.hasOpenAPIFormatForProperty()-»
«indentation»            format: «attribute.getOpenAPIFormatForProperty()»
              «ENDIF-»
              «IF attribute.hasPatternForProperty() -»
«indentation»            pattern: '«attribute.getPatternForProperty()»'
              «ENDIF-»
              «IF attribute.defaultValue != null -»
«indentation»            default: «attribute.defaultValue.stringValue().replaceAll("\"", "'")»
              «ENDIF-»
            «EXPAND java::OpenAPIRestrictions::OpenAPIRestrictions("      ") FOR attribute-»
            «IF attribute.hasExample()-»
              «IF ((Example) attribute).exampleValue.length > 0-»
«indentation»            example: «((Example) attribute).exampleValue»
              «ENDIF-»
            «ENDIF-»
            «EXPAND java::OpenAPIRestrictions::OpenAPIRestrictions("    ") FOR ownerAttribute-»
              «IF attribute.isDeprecated() || ownerAttribute.isDeprecated() -»
«indentation»            deprecated: true
              «ENDIF-»
            «ENDIF-»
          «ENDIF-»
          «IF ownerAttribute.isNullable() == false -»
«indentation»          nullable: «ownerAttribute.isNullable()»
          «ENDIF-»  
          «IF ownerAttribute.isReadOnly()  -»
«indentation»          readOnly: «ownerAttribute.isReadOnly()»
          «ENDIF-»  
          «IF ownerAttribute.isWriteOnly() -»
«indentation»          writeOnly: «ownerAttribute.isWriteOnly()»
          «ENDIF-»  
            «IF ownerAttribute.hasExample()-»
              «IF ((Example) ownerAttribute).exampleValue.length > 0-»
«indentation»          example: «((Example) ownerAttribute).exampleValue»
              «ENDIF-»
            «ENDIF-»
    «ELSE-»
    «IF suppressClassNameCommentInOpenAPISpec() == false -»
    # «this.fqn()»
    «ENDIF-»
    «this.name»:
      «IF this.compositeDataType == true -»
      type: string
          «IF ownerAttribute.isDeprecated() -»
      deprecated: true
          «ENDIF-»
      «ELSE-»
      type: «attribute.type.getOpenAPIType(spec)»
      «IF attribute.hasOpenAPIFormatForProperty()-»
      format: «attribute.getOpenAPIFormatForProperty()»
      «ENDIF-»
      «IF attribute.hasPatternForProperty() -»
      pattern: '«attribute.getPatternForProperty()»'
      «ENDIF-»
      «IF this.hasComment()-»
      description: >-
        «this.getCommentForOpenAPIDescription("        ")»
      «ENDIF-»
      «IF attribute.defaultValue != null -»
      default: «attribute.defaultValue.stringValue().replaceAll("\"", "'")»
      «ENDIF-»
      «EXPAND java::OpenAPIRestrictions::OpenAPIRestrictions("") FOR attribute-»    
      «IF attribute.isDeprecated() -»
      deprecated: true
      «ENDIF-»
      «IF attribute.isNullable() == false -»
      nullable: «attribute.isNullable()»
      «ENDIF-»  
      «IF attribute.isReadOnly()  -»
      readOnly: «attribute.isReadOnly()»
      «ENDIF-»  
      «IF attribute.isWriteOnly() -»
      writeOnly: «attribute.isWriteOnly()»
      «ENDIF-»
      «IF attribute.hasExample()-»
        «IF ((Example) attribute).exampleValue.length > 0-»
      example: «((Example) attribute).exampleValue»
        «ENDIF-»
      «ENDIF-»
      «ENDIF-»
    «ENDIF-»         
  «ENDLET -»
«ENDDEFINE»

«DEFINE GenerateOpenAPIDataTypeForPath(OpenAPI3Specification spec, Parameter param, String indent) FOR OpenAPIDataType -»
«indent»            «LET this.ownedAttribute.get(0) AS attribute -»
                «IF attribute.hasComment()-»
«indent»            description: >-
«indent»              «attribute.getCommentForOpenAPIDescription("                  ")»
                «ENDIF-»
                «IF param.isMultivalued() == false-»
				    «IF this.compositeDataType == true -»
«indent»            type: string
				        «IF param.isDeprecated() -»
«indent»            deprecated: true
				        «ENDIF-»
				    «ELSE-»
«indent»            type: «attribute.type.getOpenAPIType(spec)»
                  «IF attribute.hasOpenAPIFormatForProperty()-»
«indent»            format: «attribute.getOpenAPIFormatForProperty()»
                  «ENDIF-»
                  «IF attribute.hasPatternForProperty() -»
«indent»            pattern: '«attribute.getPatternForProperty()»'
                  «ENDIF-»
                  «IF attribute.defaultValue != null -»
«indent»            default: «attribute.defaultValue.stringValue().replaceAll("\"", "'")»
                  «ENDIF-»
                «EXPAND java::OpenAPIRestrictions::OpenAPIRestrictions("          ") FOR attribute-»    
                  «IF attribute.isDeprecated() || param.isDeprecated() -»
«indent»            deprecated: true
                  «ENDIF-»
                  «IF attribute.hasExample()-»
                    «IF ((Example) attribute).exampleValue.length > 0-»
«indent»            example: «((Example) attribute).exampleValue»
                    «ENDIF-»
                  «ENDIF-»
                  «ENDIF-»
                «ELSE-»
«indent»            type: array
«indent»            items:
				    «IF this.compositeDataType == true -»
«indent»              type: string
				        «IF param.isDeprecated() -»
«indent»              deprecated: true
				        «ENDIF-»
				    «ELSE-»
«indent»              type: «attribute.type.getOpenAPIType(spec)»
                  «IF attribute.hasOpenAPIFormatForProperty()-»
«indent»              format: «attribute.getOpenAPIFormatForProperty()»
                  «ENDIF-»
                  «IF attribute.hasPatternForProperty() -»
«indent»              pattern: '«attribute.getPatternForProperty()»'
                  «ENDIF-»
                  «EXPAND java::OpenAPIRestrictions::OpenAPIRestrictions("            ") FOR attribute-»
                  «IF attribute.hasExample()-»
                  «IF ((Example) attribute).exampleValue.length > 0-»
«indent»              example: «((Example) attribute).exampleValue»
                  «ENDIF-»
                  «ENDIF-»
                  «EXPAND java::OpenAPIRestrictions::OpenAPIRestrictions("          ") FOR param-»
                  «IF attribute.isDeprecated() || param.isDeprecated() -»
«indent»            deprecated: true
                  «ENDIF-»
                «ENDIF-»
                «ENDIF-»
                «IF param.isNullableForParam() == false -»
«indent»            nullable: «param.isNullableForParam()»
                «ENDIF-»  
                «IF param.hasExample()-»
                «IF ((Example) param).exampleValue.length > 0-»
«indent»            example: «((Example) param).exampleValue»
                «ENDIF-»
                «ENDIF-»
                «ENDLET -»
«ENDDEFINE»

«DEFINE GenerateDataTypeSerializer FOR OpenAPIDataType -»
	«FILE packagePath() + "/serializers/" + name +"Serializer.java" src_gen»
		«getFileHeader()»
		package «this.packageName()».serializers;
		
		«EXPAND java::Helper::GenerateDeprecationAnnotation-»
		/**
		 * Class implements a JSON / Jackson serializer for class «name».
		 */
		public class «name»Serializer extends com.fasterxml.jackson.databind.JsonSerializer<«name»> {		
		  «IF this.generateInternalViewOfCompositeDataType()»
			«IF this.hasCompositeDateTypeCustomSerialization() == false»
				/**
				 * List contains all classes that are involved in the serialization process. This information is required by some serialization mechanisms for efficiency and security reasons.
				 */
				private static final java.util.List<Class<?>> SERIALIZED_CLASSES;
				
				static {
				  java.util.List<Class<?>> lClasses = java.util.Arrays.asList(«FOREACH collectSerializedClassNames() AS className SEPARATOR ", "»«className».class«ENDFOREACH»);
				  SERIALIZED_CLASSES = java.util.Collections.unmodifiableList(lClasses);
				}
	
				/**
				 * Serializer is used to convert composite data type «name» into a String representation.
				 */
				private «IF isTargetRuntimeJEAF() == false»final «ENDIF» com.anaptecs.jeaf.rest.composite.api.CompositeTypeConverter serializer;
				
				«IF isTargetRuntimeJEAF() == false»
				/**
				 * Initialize object.
				 * 
				 * @param pSerializer Implementation of {@link CompositeTypeConverter} that should be used to create a String representation of «name». The parameter must not be null.
				 */
				public «name»Serializer( com.anaptecs.jeaf.rest.composite.api.CompositeTypeConverter pSerializer ) {
				  serializer = pSerializer;
				}
				«ENDIF»
			«ENDIF»
		  «ENDIF»

		  @Override
		  public void serialize( «this.fqn()» pObject, com.fasterxml.jackson.core.JsonGenerator pGenerator, com.fasterxml.jackson.databind.SerializerProvider pSerializers )
		    throws java.io.IOException {
		    
		  «IF this.isCompositeDataType()»
		  	  pGenerator.writeString(pObject.get«this.getCompositeDateTypePublicFieldName().toFirstUpper()»());
		  «ELSE»
			  «IF this.generateInternalViewOfCompositeDataType()»
					// Convert «name» into an public string only representation.
			  	«IF this.hasCompositeDateTypeCustomSerialization()»
			  		pGenerator.writeString(pObject.serialize());
			  	«ELSE»
					«IF isTargetRuntimeJEAF()»
					pGenerator.writeString(this.getSerializer().serializeObject(pObject, SERIALIZED_CLASSES));
					«ELSE»
					pGenerator.writeString(serializer.serializeObject(pObject, SERIALIZED_CLASSES));
					«ENDIF»
			  	«ENDIF»
			  «ELSE»
				  «LET this.ownedAttribute.get(0) AS attr»
				    // Write value directly to JSON and avoid nesting object structures
				    «IF attr.type.isStringType()»
				    pGenerator.writeString(pObject.«attr.asGetter()»());
				    «ELSE»«IF attr.type.isBooleanType()»
				    pGenerator.writeBoolean(pObject.«attr.asGetter()»());
				    «ELSE»
				    pGenerator.writeNumber(pObject.«attr.asGetter()»());
				    «ENDIF»		    
				    «ENDIF»
				  «ENDLET»
			  «ENDIF»
		  «ENDIF»
		  }
		  
		  «IF this.generateInternalViewOfCompositeDataType() && isTargetRuntimeJEAF() && hasCompositeDateTypeCustomSerialization() == false»
			/**
			 * Method returns the {@link CompositeTypeConverter} that should be used to serialize objects.
			 * 
			 * @return {@link CompositeTypeConverter} Serializer that should be used. The method never returns null.
			 */
			private com.anaptecs.jeaf.rest.composite.api.CompositeTypeConverter getSerializer( ) {
			  if (serializer == null) {
			    serializer = com.anaptecs.jeaf.core.api.JEAF.getServiceProvider(com.anaptecs.jeaf.rest.composite.api.jeaf.CompositeTypeConverterServiceProvider.class);
			  }
			  return serializer;
			}
		  «ENDIF»
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE GenerateDataTypeDeserializer FOR OpenAPIDataType -»
	«FILE packagePath() + "/serializers/" + name +"Deserializer.java" src_gen»
		«getFileHeader()»
		package «this.packageName()».serializers;
		
		«EXPAND java::Helper::GenerateDeprecationAnnotation-»
		/**
		 * Class implements a JSON / Jackson deserializer for class «name».
		 */
		public class «name»Deserializer extends com.fasterxml.jackson.databind.JsonDeserializer<«this.fqn()»> {

		  «IF this.generateInternalViewOfCompositeDataType()»
			«IF this.hasCompositeDateTypeCustomSerialization() == false»
				/**
				 * List contains all classes that are involved in the serialization process. This information is required by some serialization mechanisms for efficiency and security reasons.
				 */
				private static final java.util.List<Class<?>> SERIALIZED_CLASSES;
	
				static {
				  java.util.List<Class<?>> lClasses = java.util.Arrays.asList(«FOREACH collectSerializedClassNames() AS className SEPARATOR ", "»«className».class«ENDFOREACH»);
				  SERIALIZED_CLASSES = java.util.Collections.unmodifiableList(lClasses);
				}
	
				/**
				 * Deserializer is used to convert a String representation of composite data type «name» back into an real object.
				 */
				private «IF isTargetRuntimeJEAF() == false»final «ENDIF» com.anaptecs.jeaf.rest.composite.api.CompositeTypeConverter deserializer;
				
				«IF isTargetRuntimeJEAF() == false»
				/**
				 * Initialize object.
				 * 
				 * @param pDeserializer Implementation of {@link CompositeTypeConverter} that should be used to create a «name» object from its String representation. The parameter must not be null.
				 */
				public «name»Deserializer( com.anaptecs.jeaf.rest.composite.api.CompositeTypeConverter pDeserializer ) {
				  deserializer = pDeserializer;
				}
				«ENDIF»				
		  	«ENDIF»
		  «ENDIF»



		@Override
		public «this.fqn()» deserialize( com.fasterxml.jackson.core.JsonParser pParser, com.fasterxml.jackson.databind.DeserializationContext pContext ) throws java.io.IOException {
			// Parse JSON content.
			com.fasterxml.jackson.databind.JsonNode lNode = pParser.getCodec().readTree(pParser);
		
		    // We expect that data types are always serialized as plain text which will result in a TextNode.
		    «IF this.isCompositeDataType()»
		    	if (lNode instanceof com.fasterxml.jackson.databind.node.TextNode) {
		    	return «this.fqn()».builder().set«this.getCompositeDateTypePublicFieldName().toFirstUpper()»(lNode.asText()).build();
		    «ELSE»		    
				«IF this.generateInternalViewOfCompositeDataType()»
					if (lNode instanceof com.fasterxml.jackson.databind.node.TextNode) {
						// Convert public string representation of «name» into real object.
				  	«IF this.hasCompositeDateTypeCustomSerialization()»
				  		return «name».deserialize(lNode.asText());
				  	«ELSE»
						«IF isTargetRuntimeJEAF()»
							return this.getDeserializer().deserializeObject(lNode.asText(), «this.fqn()».class, SERIALIZED_CLASSES);
						«ELSE»						
							return deserializer.deserializeObject(lNode.asText(), «this.fqn()».class, SERIALIZED_CLASSES);
						«ENDIF»
					«ENDIF»
				«ELSE»
				    «LET this.ownedAttribute.get(0) AS attr»
					    if (lNode instanceof com.fasterxml.jackson.databind.node.TextNode) {
					    «IF attr.type.isBooleanType()»
				        return «this.fqn()».builder().«attr.asSetter()»(lNode.asBoolean()).build();
				        «ENDIF»
					    «IF attr.type.isStringType()»
				        return «this.fqn()».builder().«attr.asSetter()»(lNode.asText()).build();
				        «ENDIF»
				        «IF attr.type.isByteType()»
				        return «this.fqn()».builder().«attr.asSetter()»((byte)lNode.asInt()).build();
				        «ENDIF»
				        «IF attr.type.isShortType()»
				        return «this.fqn()».builder().«attr.asSetter()»((short)lNode.asInt()).build();
				        «ENDIF»
				        «IF attr.type.isIntegerType()»
				        return «this.fqn()».builder().«attr.asSetter()»(lNode.asInt()).build();
				        «ENDIF»
				        «IF attr.type.isLongType()»
				        return «this.fqn()».builder().«attr.asSetter()»(lNode.asLong()).build();
				        «ENDIF»
				        «IF attr.type.isFloatType()»
				        return «this.fqn()».builder().«attr.asSetter()»((float)lNode.asDouble()).build();
				        «ENDIF»
				        «IF attr.type.isDoubleType()»
				        return «this.fqn()».builder().«attr.asSetter()»(lNode.asDouble()).build();
				        «ENDIF»
				        «IF attr.type.isBigType()»
				        return «this.fqn()».builder().«attr.asSetter()»(new «attr.type.fqn()»(lNode.asDouble())).build();
				        «ENDIF»
				    «ENDLET»
		    	«ENDIF»
		    «ENDIF»
		    }
		    // Node is not a TextNode
		    else {
		      «IF isTargetRuntimeJEAF()»
		      throw new com.anaptecs.jeaf.xfun.api.errorhandling.JEAFSystemException(com.anaptecs.jeaf.json.api.JSONMessages.UNEXPECTED_NODE_TYPE_FOR_DESERIALIZATION, «this.fqn()».class.getName(), lNode.toString(), lNode.getClass().getName());
		      «ELSE»
		      throw new java.io.IOException("Unable to deserialize object of type «this.fqn()». Expected text node but received other type of JSON content. Current JSON node ''" + lNode.toString() + "'' is of type ''"+ lNode.getClass().getName() + "''.");
		      «ENDIF»
		    }
		}

		«IF this.generateInternalViewOfCompositeDataType() && isTargetRuntimeJEAF() && hasCompositeDateTypeCustomSerialization() == false»
			/**
			 * Method returns the {@link CompositeTypeConverter} that should be used to serialize objects.
			 * 
			 * @return {@link CompositeTypeConverter} Deserializer that should be used. The method never returns null.
			 */
			private com.anaptecs.jeaf.rest.composite.api.CompositeTypeConverter getDeserializer( ) {
			  if (deserializer == null) {
			    deserializer = com.anaptecs.jeaf.core.api.JEAF.getServiceProvider(com.anaptecs.jeaf.rest.composite.api.jeaf.CompositeTypeConverterServiceProvider.class);
			  }
			  return deserializer;
			}
		«ENDIF»
	}
	«ENDFILE»
«ENDDEFINE»
