«EXTENSION java::Naming»
«EXTENSION java::GeneratorCommons»
«EXTENSION java::OpenAPIFunctions»

«IMPORT uml»
«IMPORT JMM»
«IMPORT java»
«IMPORT entity»
«IMPORT jeaf»

«EXTENSION org::openarchitectureware::util::stdlib::io»

«DEFINE GenerateOpenAPI FOR OpenAPI3Specification»
	«REM»Register local Open API types as well as referenced ones.«ENDREM»
	«EXPAND RegisterLocalType FOREACH this.getOpenAPITypes()»
	«EXPAND RegisterLocalType FOREACH this.getOpenAPIEnums()»

	«FILE resourceName GenRes-»
openapi: «openAPIVersion»
«IF this.clientDependency.supplier.typeSelect(OpenAPIServer).size > 0»
servers:
  «FOREACH this.clientDependency.supplier.typeSelect(OpenAPIServer) AS server-»
  - description: «IF server.getComment().length > 0»«server.getComment()»«ELSE»«server.name»«ENDIF»
    url: «server.url»
  «ENDFOREACH-»
«ENDIF»
info:
  title: «name»
  version: «apiVersion»
  description: |
    «this.getComment()»
  contact:
    name: «contactName»
    url: '«contactURL»'
    email: «contactEmail»
  license:
    name: «licenseName»
    url: '«licenseURL»'

paths:
«IF this.referencesRESTResources()-»
  «EXPAND GeneratePaths»
«ELSE-»
  # Open API standard requires to define at least 1 operation. This API however seems to be a pure type definition. 
  # So we define NOP operation here as workaround.
  /nop:
    get:
      responses:
        '200':
          description: Nothing is the result of nop ;-)
«ENDIF»
«IF this.hasOpenAPITypes() || this.hasOpenAPIEnums()-»
components:
  schemas:
    «EXPAND GenerateOpenAPIType FOREACH this.getOpenAPITypes()»
    «EXPAND GenerateOpenAPIEnum FOREACH this.getOpenAPIEnums()»
«ENDIF-»
«ENDFILE-»
«ENDDEFINE»


«DEFINE RegisterLocalType FOR OpenAPIType»
«this.registerLocalType()»
«ENDDEFINE»

«DEFINE RegisterLocalType FOR OpenAPIEnumeration»
«this.registerLocalType()»
«ENDDEFINE»

«DEFINE GeneratePaths FOR OpenAPI3Specification -»
  # TODO: Generate operations for all referenced REST Resources.
  «FOREACH this.getRESTResources() AS service-»
  # «service.name»
  «FOREACH service.getPaths() AS path-»
  «IF service.path.length > 0»«service.path»«ELSE»/«ENDIF»«IF path.length > 0»/«path»«ENDIF»:
    «FOREACH service.getRESTOperations(path) AS operation-»
    «FOREACH operation.httpMethods AS httpMethod-»
    «httpMethod.toString().toLowerCase()»:
      «IF operation.hasComment()-»
      description: >-
        «operation.getCommentForOpenAPIDescription("        ")»
      «ENDIF-»
      «IF operation.hasOpenAPIInputParameters() || operation.hasBeanParameters()-»
      parameters:
        «FOREACH operation.getOpenAPIInputParameters() AS param-»
        - name: «EXPAND RESTParamName FOR param»
          in: «param.getOpenAPIParameterType()»
          description: >- 
            «IF param.hasComment()»»«param.getComment()»«ELSE»TODO Please add comment«ENDIF»
          required: «param.isRequired()»
          schema:
            «REM»Only basic types are supported as parameters«ENDREM-»
            «IF param.type.isBasicOpenAPIType() == true-»
            	«IF param.isMultivalued() == false-»
            type: «param.type.getOpenAPIType()»
            		«IF param.type.hasOpenAPIFormat()-»
            format: «param.type.getOpenAPIFormat()»
            		«ENDIF-»
            	«ELSE-»
            type: array
            items:
              type: «param.type.getOpenAPIType()»
              		«IF param.type.hasOpenAPIFormat()-»
              format: «param.type.getOpenAPIFormat()»
              		«ENDIF-»
            	«ENDIF-»
            «ENDIF-»
        «ENDFOREACH-»
        «FOREACH operation.getBeanParams() AS param-»
        «FOREACH param.type.getOpenAPIProperties() AS property-»
        - name: «property.name»
          in: «property.getOpenAPIParameterType()»
          description: >- 
            «IF property.hasComment()»»«property.getComment()»«ELSE»TODO Please add comment«ENDIF»
          required: «property.isRequired()»
          schema:
            «REM»Only basic types are supported as parameters«ENDREM-»
            «IF property.type.isBasicOpenAPIType() == true-»
            	«IF property.isMultivalued() == false-»
            type: «property.type.getOpenAPIType()»
            		«IF property.type.hasOpenAPIFormat()-»
            format: «property.type.getOpenAPIFormat()»
            		«ENDIF-»
            	«ELSE-»
            type: array
            items:
              type: «property.type.getOpenAPIType()»
              		«IF property.type.hasOpenAPIFormat()-»
              format: «property.type.getOpenAPIFormat()»
              		«ENDIF-»
            	«ENDIF-»
            «ENDIF-»
        «ENDFOREACH-»
        «ENDFOREACH-»
      «ENDIF-»
      responses:
        '200':
          content:  
            «FOREACH service.produces AS contentType-»
            «contentType.toOpenAPIContentType()»:
            «ENDFOREACH-»
            
    «ENDFOREACH-»
    «ENDFOREACH-»
  «ENDFOREACH-»
  «ENDFOREACH-»
«ENDDEFINE»

«DEFINE GenerateOpenAPIType FOR OpenAPIType»
    # «this.fqn()»
    «this.name»:
      «IF this.hasComment()-»
      description: >-
        «this.getCommentForOpenAPIDescription("        ")»
      «ENDIF-»
      «IF this.isTopOfClassHierarchy()-»
      discriminator:
        propertyName: objectType
        mapping:
          «name»: «this.getOpenAPIType()»
          «FOREACH this.getAllSubclasses() AS subclass-»
          «subclass.name»: «subclass.getOpenAPIType()»
          «ENDFOREACH-»
      «ENDIF-»
      «IF superClass.isEmpty == false -»
      allOf:
        - $ref: «superClass.get(0).getOpenAPIType()»
      «ENDIF-»
      type: object
      «IF this.ownedAttribute.size > 0 || this.isTopOfClassHierarchy() -»
      properties:
        «IF this.isTopOfClassHierarchy() -»
        objectType:
          description: Attribute is used as discriminator for inheritance between data types.
          type: string
        «ENDIF-»
        «FOREACH this.ownedAttribute AS attribute-»
        «attribute.name»: 
          «IF attribute.hasComment()-»
          description: >-
            «attribute.getCommentForOpenAPIDescription("            ")»
          «ENDIF-»
          «IF attribute.type.isBasicOpenAPIType() == true-»
          «IF attribute.isMultivalued() == false-»
          type: «attribute.type.getOpenAPIType()»
          «IF attribute.type.hasOpenAPIFormat()-»
          format: «attribute.type.getOpenAPIFormat()»
          «ENDIF-»
          «ELSE-»
          type: array
          items:
            type: «attribute.type.getOpenAPIType()»
            «IF attribute.type.hasOpenAPIFormat()-»
            format: «attribute.type.getOpenAPIFormat()»
            «ENDIF-»
          «ENDIF-»
          «ELSE-»
          «IF attribute.isMultivalued() == false-»
          $ref: «attribute.type.getOpenAPIType()»
          «ELSE-»
          type: array
          items:
            $ref: «attribute.type.getOpenAPIType()»
          minItems: «attribute.getLower()»
          «ENDIF-»
          «ENDIF-»
        «ENDFOREACH-»
      «IF this.isTopOfClassHierarchy() || this.hasRequiredProperties() -»
      required:
        - objectType
        «FOREACH this.getRequiredProperties() AS property-»
        - «property.name»
        «ENDFOREACH-»
      «ENDIF-»
      «ENDIF-»
«ENDDEFINE»

«DEFINE GenerateOpenAPIEnum FOR OpenAPIEnumeration»
    # «this.fqn()»
    «this.name»:
      «IF this.hasComment()-»
      description: >-
        «this.getCommentForOpenAPIDescription("        ")»
      «ENDIF-»        
      type: string
      enum:
        «FOREACH this.ownedLiteral AS literal-»        
        «IF literal.hasComment()-»
        # «literal.getYAMLStyleComment("        ")»
        «ENDIF-»
        - «literal.name»
        «ENDFOREACH-»
«ENDDEFINE»

«DEFINE RESTParamName FOR Parameter-»
«IF this.isStereotypeApplied("PathParam")»«((PathParam) this).value»«ENDIF-»
«IF this.isStereotypeApplied("HeaderParam")»«((HeaderParam) this).value-»«ENDIF-»
«IF this.isStereotypeApplied("QueryParam")»«((QueryParam) this).value-»«ENDIF-»
«IF this.isStereotypeApplied("CookieParam")»«((CookieParam) this).value-»«ENDIF-»
«ENDDEFINE»


«DEFINE RESTParameterDefinition FOR Parameter»
  «IF this.isStereotypeApplied("PathParam") -»
  @javax.ws.rs.PathParam("«((PathParam) this).value-»")
  «ENDIF-»
  «IF this.isStereotypeApplied("HeaderParam") -»
  @javax.ws.rs.HeaderParam("«((HeaderParam) this).value-»")
  «ENDIF-»
  «IF this.isStereotypeApplied("QueryParam") -»
  @javax.ws.rs.QueryParam("«((QueryParam) this).value-»")
  «ENDIF-»
  «IF this.isStereotypeApplied("CookieParam") -»
  @javax.ws.rs.CookieParam("«((CookieParam) this).value-»")
  «ENDIF-»
  «IF this.isStereotypeApplied("BeanParam") -»
  @javax.ws.rs.BeanParam 
  «ENDIF-»
  «IF this.type.isStereotypeApplied("BeanParam") -»
  @javax.ws.rs.BeanParam
  «ENDIF-»
  «this.getTypeName()» «this.name»
«ENDDEFINE»
