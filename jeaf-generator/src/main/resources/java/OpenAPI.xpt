«EXTENSION java::Naming»
«EXTENSION java::GeneratorCommons»
«EXTENSION java::OpenAPIFunctions»

«IMPORT uml»
«IMPORT JMM»
«IMPORT java»
«IMPORT entity»
«IMPORT jeaf»

«EXTENSION org::openarchitectureware::util::stdlib::io»

«DEFINE GenerateOpenAPI FOR OpenAPI3Specification»
	«FILE resourceName GenRes-»
openapi: «openAPIVersion»
«IF this.clientDependency.supplier.typeSelect(OpenAPIServer).size > 0»
servers:
  «FOREACH this.clientDependency.supplier.typeSelect(OpenAPIServer).sortBy(e|e.name).sortBy(e|e.order) AS server-»
  - url: «server.url»
    «IF server.hasComment() -»
    description: >- 
      «server.getCommentForOpenAPIDescription("      ")»
    «ENDIF-»    
  «ENDFOREACH-»
«ENDIF»
info:
  title: «name»
  version: «IF apiVersion.length > 0»«apiVersion»«ELSE»«getMavenVersion()»«ENDIF»
  «IF this.hasComment() -»
  description: >-
    «this.getCommentForOpenAPIDescription("    ")»
  «ENDIF-»
  «IF termsOfUseURL.length > 0 -»
  termsOfService: «termsOfUseURL»
  «ENDIF -»
  «IF contactName.length > 0 || contactURL.length > 0 || contactEmail.length > 0 -»
  contact:
    «IF contactName.length >0 -»
    name: «contactName»
    «ENDIF-»
    «IF contactURL.length > 0 -»
    url: '«contactURL»'
    «ENDIF-»
    «IF contactEmail.length > 0 -»
    email: «contactEmail»
    «ENDIF-»
  «ENDIF»
  «IF licenseName.length > 0 || licenseURL.length > 0-»
  license:
    «IF licenseName.length > 0 -»
    name: «licenseName»
    «ENDIF-»
    «IF licenseURL.length > 0 -»
    url: '«licenseURL»'
    «ENDIF-»
  «ENDIF»    
«IF this.clientDependency.supplier.typeSelect(OpenAPITag).size > 0 -»
tags:
«EXPAND GenerateTags FOREACH this.clientDependency.supplier.typeSelect(OpenAPITag).sortBy(e|e.name).sortBy(e|e.order)»
«ENDIF-»
paths:
«IF this.referencesRESTResources()-»
  «EXPAND GeneratePaths»
«ELSE-»
  # OpenAPI standard requires to define at least 1 operation. This API however seems to be a pure type definition. 
  # So we define NOP operation here as workaround.
  /nop:
    get:
      operationId: noOperation
      responses:
        '200':
          description: Nothing is the result of nop ;-)
«ENDIF»
«IF this.hasOpenAPITypes() || this.hasOpenAPIEnums()-»
components:
  «IF this.getErrorResponses().size > 0-»
  responses:
    «EXPAND GenerateErrorResponse(this) FOREACH this.getErrorResponses()»
  «ENDIF -»

  «IF this.getOpenAPITypes().size > 0 || this.getOpenAPIEnums().size > 0 -»
  schemas:
    «EXPAND GenerateOpenAPIType(this) FOREACH this.getOpenAPITypes()»
    «EXPAND GenerateOpenAPIEnum FOREACH this.getOpenAPIEnums()»
  «ENDIF -»
«ENDIF-»
«ENDFILE-»
«ENDDEFINE»

«DEFINE RegisterLocalTypes FOR OpenAPI3Specification»
	«REM»Register local OpenAPI types as well as referenced ones.«ENDREM»
	«EXPAND RegisterLocalType(this) FOREACH this.getOpenAPITypes()»
	«EXPAND RegisterLocalType(this) FOREACH this.getOpenAPIEnums()»
	«EXPAND RegisterLocalType(this) FOREACH this.getErrorResponses()»
	
	«FOREACH this.clientDependency.typeSelect(OpenAPISpecReference) AS dependency»
	  «FOREACH dependency.supplier.typeSelect(OpenAPI3Specification) AS dependentSpec»
	    «IF dependency.location.length > 0»
	    «registerSpecDependency(this, dependentSpec, dependency.location + dependentSpec.resourceName)»
	    «REM» Also create spec dependency in opposite direction «ENDREM» 
	    «registerSpecDependency(dependentSpec, this, dependency.location + this.resourceName)»
	    «ELSE»
	    «registerSpecDependency(this, dependentSpec, dependentSpec.resourceName)»
	    «REM» Also create spec dependency in opposite direction «ENDREM» 
	    «registerSpecDependency(dependentSpec, this, this.resourceName)»	    
	    «ENDIF»
	  «ENDFOREACH»
	«ENDFOREACH»
	«EXPAND RegisterLocalTypes FOREACH this.getDependentSpecs()»

«ENDDEFINE»

«DEFINE RegisterLocalType(OpenAPI3Specification spec) FOR ErrorResponse»
«this.registerLocalType(spec)»
«ENDDEFINE»

«DEFINE RegisterLocalType(OpenAPI3Specification spec) FOR OpenAPIType»
«this.registerLocalType(spec)»
«ENDDEFINE»

«DEFINE RegisterLocalType(OpenAPI3Specification spec) FOR OpenAPIEnumeration»
«this.registerLocalType(spec)»
«ENDDEFINE»

«DEFINE GeneratePaths FOR OpenAPI3Specification -»
  «FOREACH this.getRESTResources() AS service -»
  # «service.name»
  «FOREACH service.getPaths() AS path-»
  «IF service.path.length > 0»«service.path»«ELSE»/«ENDIF»«IF path.length > 0»/«path»«ENDIF»:
    «FOREACH service.getRESTOperations(path) AS operation-»
    «FOREACH operation.httpMethods AS httpMethod-»
    «httpMethod.toString().toLowerCase()»:
      «IF operation.hasComment()-»
      description: >-
        «operation.getCommentForOpenAPIDescription("        ")»
      «ENDIF-»
      operationId: «operation.getOperationID(service)»
      «IF operation.getTargetDirectedRelationships().source.typeSelect(OpenAPITag).size > 0 -»
      tags:
      «FOREACH operation.getTargetDirectedRelationships().source.typeSelect(OpenAPITag).sortBy(e|e.name) AS tag -»
        - «tag.name»
      «ENDFOREACH-»
      «ENDIF-»
      «IF operation.externalDocsURL.length > 0 -»
      externalDocs:
        url: «operation.externalDocsURL»
      «ENDIF-»
      «IF operation.isDeprecated() -»
      deprecated: true
      «ENDIF-»
      «REM»Process REST request paramaters«ENDREM-»
      «IF operation.hasOpenAPIInputParameters() || operation.hasBeanParameters()-»
      parameters:
        «REM»Process normal paramaters«ENDREM-»
        «FOREACH operation.getOpenAPIInputParameters() AS param-»
        - name: «EXPAND RESTParamName FOR param»
          in: «param.getOpenAPIParameterType()»
          description: >- 
            «IF param.hasComment()»«param.getCommentForOpenAPIDescription("            ")»«ELSE»TODO Please add comment«ENDIF»
          required: «param.isRequired()»
          «IF param.isDeprecated() -»
          deprecated: true
          «ENDIF-»
          schema:
            «IF param.type.isBasicOpenAPIType() == true-»
            	«IF param.isMultivalued() == false-»
            type: «param.type.getOpenAPIType(this)»
            		«IF param.type.hasOpenAPIFormat()-»
            format: «param.type.getOpenAPIFormat()»
            		«ENDIF-»
            	«ELSE-»
            type: array
            items:
              type: «param.type.getOpenAPIType(this)»
              		«IF param.type.hasOpenAPIFormat()-»
              format: «param.type.getOpenAPIFormat()»
              		«ENDIF-»
            	«ENDIF-»
                «IF param.hasExample()-»
                  «IF ((Example) param).exampleValue.length > 0-»
            example: '«((Example) param).exampleValue»'
                  «ENDIF-»
                «ENDIF-»
            «ENDIF-»
        «ENDFOREACH-»
        «REM»Process bean paramaters«ENDREM-»
        «FOREACH operation.getBeanParams() AS param-»
        «FOREACH param.type.getOpenAPIProperties() AS property-»
        - name: «EXPAND RESTParamName FOR property»
          in: «property.getOpenAPIParameterType()»
          description: >- 
            «IF property.hasComment()»«property.getCommentForOpenAPIDescription("            ")»«ELSE»TODO Please add comment«ENDIF»
          required: «property.isRequired()»
          «IF property.isDeprecated() -»
          deprecated: true
          «ENDIF-»
          «REM»Only basic types are supported as parameters«ENDREM -»
          schema:
            «IF property.type.isBasicOpenAPIType() == true -»
            	«IF property.isMultivalued() == false -»
            type: «property.type.getOpenAPIType(this)»
            		«IF property.type.hasOpenAPIFormat()-»
            format: «property.type.getOpenAPIFormat()»
            		«ENDIF-»
                    «IF property.defaultValue != null -»
            default: «property.defaultValue.stringValue()»
                    «ENDIF-»
            	«ELSE-»
            type: array
            items:
              type: «property.type.getOpenAPIType(this)»
              		«IF property.type.hasOpenAPIFormat()-»
              format: «property.type.getOpenAPIFormat()»
              		«ENDIF-»
            	«ENDIF -»
                «IF property.hasExample()-»
                  «IF ((Example) property).exampleValue.length > 0-»
            example: '«((Example) property).exampleValue»'
                  «ENDIF-»
                «ENDIF-»
            «ELSE -»
            type: string
                «IF property.defaultValue != null -»
            default: '«property.defaultValue.stringValue()»'
                «ENDIF-»
            «ENDIF-»
        «ENDFOREACH-»
        «ENDFOREACH-»
      «ENDIF-»
      «REM»Process request body«ENDREM-»
      «IF operation.hasRequestBody(httpMethod) -»
      requestBody:
      «FOREACH operation.getRequestBodyParameters() AS param-»
        description: >- 
          «IF param.hasComment()»«param.getCommentForOpenAPIDescription("          ")»«ELSE»TODO Please add comment«ENDIF»
          «IF param.isDeprecated() && param.type.isBasicOpenAPIType() == false-»
          Operation has deprected body parameter. Please be aware that deprecations on complex bodies are not supported. Instead the whole operation needs to be set to deprecated.
          «ENDIF-»
        required: «param.isRequired()»
        content:
          «FOREACH unifyMediaTypes(service.consumes, operation.consumes) AS mediaType-»
          «mediaType.toOpenAPIContentType()»:
            schema:
              «IF param.type.isOpenAPIDataType() -»
              «EXPAND java::OpenAPIDataType::GenerateOpenAPIDataTypeForPath(this, param) FOR (OpenAPIDataType) param.type -»
              «ELSE -»
              «IF param.type.isBasicOpenAPIType() == true-»
                «IF param.isMultivalued() == false-»
              type: «param.type.getOpenAPIType(this)»
                  «IF param.type.hasOpenAPIFormat()-»
              format: «param.type.getOpenAPIFormat()»
                  «ENDIF-»
                  «IF param.isDeprecated() -»
              deprecated: true
                  «ENDIF-»                
                «ELSE-»
              type: array
              items:
                type: «param.type.getOpenAPIType(this)»
                  «IF param.type.hasOpenAPIFormat()-»
                format: «param.type.getOpenAPIFormat()»
                  «ENDIF-»
                  «IF param.isDeprecated() -»
                deprecated: true
                  «ENDIF-»                
                «ENDIF-»
                «IF param.hasExample()-»
                  «IF ((Example) param).exampleValue.length > 0-»
              example: '«((Example) param).exampleValue»'
                  «ENDIF-»
                «ENDIF-»
              «ELSE-»
                «IF param.isMultivalued() == false-»
              $ref: «param.type.getOpenAPIType(this)»
                «ELSE-»
              type: array
              items:
                $ref: «param.type.getOpenAPIType(this)»
              minItems: «param.getLower()»
                «ENDIF-»
              «ENDIF-»
              «ENDIF-»
          «ENDFOREACH-»
      «ENDFOREACH-»
      «ENDIF-»
      responses:
        '200':
          «IF operation.hasReturnTypeVoid() == false-»
          «LET operation.getReturnResult() AS returnParam-»
          description: >- 
            «IF operation.getReturnResult().hasComment()»«operation.getReturnResult().getCommentForOpenAPIDescription("            ")»«ELSE»TODO Please add comment«ENDIF»
            «IF returnParam.isDeprecated() && returnParam.type.isBasicOpenAPIType() == false-»
            Operation has deprected return type. Please be aware that deprecations on complex return types are not supported. Instead the whole operation needs to be set to deprecated.
            «ENDIF-»
          content:  
            «FOREACH unifyMediaTypes(service.produces, operation.produces) AS contentType-»
            «contentType.toOpenAPIContentType()»:
              schema:
                «IF returnParam.type.isOpenAPIDataType() -»
                «EXPAND java::OpenAPIDataType::GenerateOpenAPIDataTypeForPath(this, returnParam) FOR (OpenAPIDataType) returnParam.type -»
                «ELSE -»
                «IF returnParam.type.isBasicOpenAPIType() == true-»
                  «IF returnParam.isMultivalued() == false-»
                type: «returnParam.type.getOpenAPIType(this)»
                    «IF returnParam.type.hasOpenAPIFormat()-»
                format: «returnParam.type.getOpenAPIFormat()»
                    «ENDIF-»
                    «IF returnParam.isDeprecated() -»
                deprecated: true
                    «ENDIF-»
                  «ELSE-»
                type: array
                items:
                  type: «returnParam.type.getOpenAPIType(this)»
                    «IF returnParam.type.hasOpenAPIFormat()-»
                  format: «returnParam.type.getOpenAPIFormat()»
                    «ENDIF-»
                  «ENDIF-»
                  «IF returnParam.hasExample()-»
                    «IF ((Example) returnParam).exampleValue.length > 0-»
                example: '«((Example) returnParam).exampleValue»'
                    «ENDIF-»
                «ENDIF-»
                «ELSE-»
                  «IF returnParam.isMultivalued() == false-»
                $ref: «returnParam.type.getOpenAPIType(this)»
                  «ELSE-»
                type: array
                items:
                  $ref: «returnParam.type.getOpenAPIType(this)»
                minItems: «returnParam.getLower()»
                  «ENDIF-»
                «ENDIF-»
                «ENDIF-»
            «ENDFOREACH-»
          «ENDLET-»
          «ELSE-»
          description: Operation does not return any content.
          «ENDIF-»
        «EXPAND java::OpenAPIResponse::ErrorResponses(this) FOR operation-»
    «ENDFOREACH-»
    «ENDFOREACH-»
  «ENDFOREACH-»
  «ENDFOREACH-»
«ENDDEFINE»

«DEFINE GenerateErrorResponse(OpenAPI3Specification spec) FOR ErrorResponse -»
    # «this.fqn()»
    «this.name»:
      «IF this.hasComment()-»
      description: >-
        «this.getCommentForOpenAPIDescription("        ")»
      «ELSE -»
      description: TODO Please add comment to error response type
      «ENDIF-»
      content:
        «this.contentType.name.toOpenAPIContentType()»:
          schema:
            $ref: «this.getErrorResponseType().getOpenAPIType(spec)»
«ENDDEFINE»

«DEFINE GenerateOpenAPIType(OpenAPI3Specification spec) FOR OpenAPIType -»
    # «this.fqn()»
    «this.name»:
      «IF this.hasComment()-»
      description: >-
        «this.getCommentForOpenAPIDescription("        ")»
      «ENDIF-»
      «IF this.isTopOfClassHierarchy()-»
      discriminator:
        propertyName: objectType
        mapping:
          «name»: «this.getOpenAPIType(spec)»
          «FOREACH this.getAllSubclasses().typeSelect(OpenAPIType) AS subclass-»
          «subclass.name»: «subclass.getOpenAPIType(spec)»
          «ENDFOREACH-»
      «ENDIF-»
      «IF superClass.isEmpty == false -»
      allOf:
        - $ref: «superClass.get(0).getOpenAPIType(spec)»
      «ENDIF-»
      «IF this.isDeprecated() -»
      deprecated: true
      «ENDIF -»
      type: object
      «IF this.ownedAttribute.size > 0 || this.isTopOfClassHierarchy() -»
      properties:
        «IF this.isTopOfClassHierarchy() -»
        objectType:
          description: Attribute is used as discriminator for inheritance between data types.
          type: string
        «ENDIF-»
        «FOREACH this.ownedAttribute AS attribute-»
        «attribute.name»: 
          «IF attribute.type.isOpenAPIDataType() -»
          «EXPAND java::OpenAPIDataType::GenerateOpenAPIDataType(spec, attribute) FOR (OpenAPIDataType) attribute.type -»
          «ELSE -»
          «IF attribute.hasComment() -»
            «IF attribute.type.isBasicOpenAPIType() == false && attribute.type.getAllConcreteSubclasses().size == 0 && attribute.isMultivalued() == false-»
            «ELSE-» 
          description: >-
            «attribute.getCommentForOpenAPIDescription("            ")»
            «ENDIF-»
          «ENDIF-»
          «IF attribute.type.isBasicOpenAPIType() == true-»
            «IF attribute.isMultivalued() == false-»
          type: «attribute.type.getOpenAPIType(spec)»
              «IF attribute.type.hasOpenAPIFormat()-»
          format: «attribute.type.getOpenAPIFormat()»
              «ENDIF-»
          «EXPAND java::OpenAPIRestrictions::OpenAPIRestrictions("") FOR attribute-»    
              «IF attribute.isDeprecated() -»
          deprecated: true
              «ENDIF-»
            «ELSE-»
              «IF attribute.type.isByteType() -»
          type: string
          format: byte
              «ELSE -»
          type: array
          items:
            type: «attribute.type.getOpenAPIType(spec)»
              «IF attribute.type.hasOpenAPIFormat()-»
            format: «attribute.type.getOpenAPIFormat()»
              «ENDIF-»
            «EXPAND java::OpenAPIRestrictions::OpenAPIRestrictions("") FOR attribute-»              
              «IF attribute.isDeprecated() -»
            deprecated: true
              «ENDIF-»
            «ENDIF-»
           «ENDIF-»
          «IF attribute.isNullable() == false -»
          nullable: «attribute.isNullable()»
          «ENDIF-»  
          «IF attribute.isReadOnly()  -»
          readOnly: «attribute.isReadOnly()»
          «ENDIF-»  
          «IF attribute.isWriteOnly() -»
          writeOnly: «attribute.isWriteOnly()»
          «ENDIF-»  
          «IF attribute.defaultValue != null -»
          default: «attribute.defaultValue.stringValue()»
          «ENDIF-»
            «IF attribute.hasExample()-»
              «IF ((Example) attribute).exampleValue.length > 0-»
          example: '«((Example) attribute).exampleValue»'
              «ENDIF-»
            «ENDIF-»
          «ELSE-»
            «IF attribute.isDeprecated() -»
          # Attribute "«attribute.name»" is marked as deprecated. However OpenAPI does not support to mark references to complex types as deprecated.
            «ENDIF-»
            «IF attribute.isMultivalued() == false-»
              «IF attribute.type.getAllConcreteSubclasses().size > 0 -»
          oneOf:
                «IF ((Class)attribute.type).isAbstract == false -»
            - $ref: «attribute.type.getOpenAPIType(spec)»
                «ENDIF-»
                «FOREACH attribute.type.getAllConcreteSubclasses() AS subclass -»
            - $ref: «subclass.getOpenAPIType(spec)»
                «ENDFOREACH-»
              «ELSE-»
          $ref: «attribute.type.getOpenAPIType(spec)»
              «ENDIF-»
            «ELSE-»
          type: array
          items:
              «IF attribute.type.getAllConcreteSubclasses().size > 0 -»
            oneOf:
                «IF ((Class)attribute.type).isAbstract == false -»
              - $ref: «attribute.type.getOpenAPIType(spec)»
                «ENDIF-»
                «FOREACH attribute.type.getAllConcreteSubclasses() AS subclass -»
              - $ref: «subclass.getOpenAPIType(spec)»
                «ENDFOREACH-»
              «ELSE-»
            $ref: «attribute.type.getOpenAPIType(spec)»
              «ENDIF-»
          minItems: «attribute.getLower()»
            «ENDIF-»
          «ENDIF-»
          «ENDIF-»
        «ENDFOREACH-»
      «IF this.isTopOfClassHierarchy() || this.hasRequiredProperties() -»
      required:
        «IF this.isTopOfClassHierarchy() -»
        - objectType
        «ENDIF-»
        «FOREACH this.getRequiredProperties() AS property-»
        - «property.name»
        «ENDFOREACH-»
      «ENDIF-»
      «ENDIF-»
«ENDDEFINE»

«DEFINE GenerateOpenAPIEnum FOR OpenAPIEnumeration»
    # «this.fqn()»
    «this.name»:
      «IF this.hasComment()-»
      description: >-
        «this.getCommentForOpenAPIDescription("        ")»
      «ENDIF-»        
      type: string
      «IF this.isDeprecated() -»
      deprecated: true
      «ENDIF-»
      «IF this.extensibleEnum == true-»
      x-extensible-enum:
      «ELSE-»
      enum:
      «ENDIF-»
        «FOREACH this.ownedLiteral AS literal-»        
        «IF literal.hasComment()-»
        # «literal.getYAMLStyleComment("        ")»
        «ENDIF-»
        «IF literal.isDeprecated() -»
        # Literal "«literal.name»" is marked as deprecated. However OpenAPI does not support to mark literals as deprecated. 
        «ENDIF-»
        - «literal.name»
        «ENDFOREACH-»
«ENDDEFINE»

«DEFINE RESTParamName FOR Parameter-»
«IF this.isStereotypeApplied("PathParam")»«IF ((PathParam) this).value.length > 0»«((PathParam) this).value -»«ELSE»«this.name»«ENDIF»«ENDIF-»
«IF this.isStereotypeApplied("HeaderParam")»«IF ((HeaderParam) this).value.length > 0»«((HeaderParam) this).value -»«ELSE»«this.name»«ENDIF»«ENDIF-»
«IF this.isStereotypeApplied("QueryParam")»«IF ((QueryParam) this).value.length > 0»«((QueryParam) this).value  -»«ELSE»«this.name»«ENDIF»«ENDIF-»
«IF this.isStereotypeApplied("CookieParam")»«IF ((CookieParam) this).value.length > 0»«((CookieParam) this).value -»«ELSE»«this.name»«ENDIF»«ENDIF-»
«ENDDEFINE»

«DEFINE RESTParamName FOR Property-»
«IF this.isStereotypeApplied("PathParam")»«IF ((PathParam) this).value.length > 0 -»«((PathParam) this).value -»«ELSE»«this.name»«ENDIF»«ENDIF-»
«IF this.isStereotypeApplied("HeaderParam")»«IF ((HeaderParam) this).value.length > 0 -»«((HeaderParam) this).value -»«ELSE»«this.name»«ENDIF»«ENDIF-»
«IF this.isStereotypeApplied("QueryParam")»«IF ((QueryParam) this).value.length > 0 -»«((QueryParam) this).value -»«ELSE»«this.name»«ENDIF»«ENDIF-»
«IF this.isStereotypeApplied("CookieParam")»«IF ((CookieParam) this).value.length > 0 -»«((CookieParam) this).value -»«ELSE»«this.name»«ENDIF»«ENDIF-»
«ENDDEFINE»

«DEFINE GenerateTags FOR OpenAPITag -»
  - name: «this.name»
    «IF this.hasComment()-»
    description: >-
      «this.getCommentForOpenAPIDescription("      ")»
    «ENDIF-»    
    «IF this.externalDocsURL.length > 0 -»
      url: «this.externalDocsURL»
    «ENDIF -»
«ENDDEFINE»