«EXTENSION java::GeneratorCommons»
«EXTENSION java::Naming»
«EXTENSION java::Helper»

«DEFINE GenerateToStringMethod FOR uml::Class»
  /**
   * Method returns a StringBuilder that can be used to create a String representation of this object. The returned StringBuilder also takes care about attributes of super classes.
   *
   * @return {@link StringBuilder} StringBuilder representing this object. The method never returns null.
   */
  public StringBuilder toStringBuilder( String pIndent) {
    «IF isTargetRuntimeJEAF()»
	    «IF this.isCompositeDataType()»
            StringBuilder lBuilder = new StringBuilder();
		    lBuilder.append(XFun.getMessageRepository().getMessage(XFunMessages.OBJECT_INFO, this.getClass().getName()));
		    lBuilder.append(System.lineSeparator());
		    lBuilder.append(XFun.getMessageRepository().getMessage(XFunMessages.OBJECT_ATTRIBUTES_SECTION));
		    lBuilder.append(System.lineSeparator());
		    lBuilder.append(XFun.getMessageRepository().getMessage(XFunMessages.OBJECT_ATTRIBUTE, "«this.getCompositeDateTypePublicFieldName()»", "" + «this.getCompositeDateTypePublicFieldName()»));
		    lBuilder.append(System.lineSeparator());
	    «ELSE»
		    «IF this.superClass.isEmpty == true»
	            StringBuilder lBuilder = new StringBuilder();
			    lBuilder.append(XFun.getMessageRepository().getMessage(XFunMessages.OBJECT_INFO, this.getClass().getName()));
			    lBuilder.append(System.lineSeparator());
			    «IF this.getToStringProperties().size > 0»
				    lBuilder.append(XFun.getMessageRepository().getMessage(XFunMessages.OBJECT_ATTRIBUTES_SECTION));
				    lBuilder.append(System.lineSeparator());
			    «ENDIF»
		    «ELSE»
			    StringBuilder lBuilder = super.toStringBuilder(pIndent);
		    «ENDIF»
		    «FOREACH this.getToStringProperties() AS attribute»
			    «IF attribute.association == null && attribute.isMultivalued() == false»
			    lBuilder.append(XFun.getMessageRepository().getMessage(XFunMessages.OBJECT_ATTRIBUTE, "«attribute.name»", "" + «attribute.name»));
			    lBuilder.append(System.lineSeparator());
			    «ENDIF»
		    «ENDFOREACH»
	    «ENDIF»
    «ELSE»
	    «IF this.isCompositeDataType()»
            StringBuilder lBuilder = new StringBuilder();
            lBuilder.append(pIndent);
		    lBuilder.append(this.getClass().getName());
		    lBuilder.append(System.lineSeparator());
		    lBuilder.append(pIndent);
		    lBuilder.append("«this.getCompositeDateTypePublicFieldName()»: ");
		    lBuilder.append(«this.getCompositeDateTypePublicFieldName()»);
		    lBuilder.append(System.lineSeparator());
	    «ELSE»
		    «IF this.superClass.isEmpty == true»
	            StringBuilder lBuilder = new StringBuilder();
	            lBuilder.append(pIndent);
			    lBuilder.append(this.getClass().getName());
			    lBuilder.append(System.lineSeparator());
		    «ELSE»
			    StringBuilder lBuilder = super.toStringBuilder(pIndent);
		    «ENDIF»
		    «FOREACH this.getToStringProperties() AS attribute»
				lBuilder.append(pIndent);
				lBuilder.append("«attribute.name»: ");
			    «EXPAND ToStringValue FOR attribute»
		    «ENDFOREACH»
	    «ENDIF»
    «ENDIF»
    return lBuilder;
  }
  
  /**
   * Method creates a new String with the values of all attributes of this class. All references to other objects will be ignored.
   * 
   * @return {@link String} String representation of this object. The method never returns null.
   */
  @Override
  public String toString( ) {
    return this.toStringBuilder("").toString();
  }
  
«ENDDEFINE»

«DEFINE ToStringValue FOR uml::Property»
    «IF association == null »
	    «IF isMultivalued() == false»
		    lBuilder.append(«name»);
	    «ELSE»
		    if(«name» != null) {
		    	lBuilder.append(java.util.Arrays.toString(«name»));
		    }
		    else {
		    	lBuilder.append(" null");
		    }
	    «ENDIF»
	    lBuilder.append(System.lineSeparator());
    «ELSE»
	    «IF isMultivalued() == false»
		    «IF type.isEnumeration() == false»
		    if(«name» != null) {
		    	lBuilder.append(System.lineSeparator());
		    	lBuilder.append(«name».toStringBuilder(pIndent + "    "));
		    }
		    else {
		    	lBuilder.append(" null");
		    	lBuilder.append(System.lineSeparator());
		    }
		    «ELSE»
		    lBuilder.append(«name»);
		    lBuilder.append(System.lineSeparator());
		    «ENDIF»
	    «ELSE»
		    if («name» != null) {
		      lBuilder.append(«name».size());
		      lBuilder.append(" element(s)");
		    }
		    else {
		      lBuilder.append(" null");
		    }
		    lBuilder.append(System.lineSeparator());
		    if («name» != null) {
		      for («type.fqn()» lNext : «name») {
		        lBuilder.append(lNext.toStringBuilder(pIndent + "    "));
		        lBuilder.append(System.lineSeparator());
		      }
		    }
	    «ENDIF»
    «ENDIF»
«ENDDEFINE»


«DEFINE GenerateDeprecationAnnotation FOR uml::NamedElement»
	«IF this.isDeprecated()-»
	@Deprecated
	«ENDIF-»
«ENDDEFINE»

«DEFINE GenerateConstantsForAttributeNames FOR uml::Class»
	«IF generateConstantsForAttributeNames() == true»
		«IF this.isCompositeDataType()»
				/**
				 * Constant for the name of attribute "«this.getCompositeDateTypePublicFieldName()»".
				 */
				public static final String «this.getCompositeDateTypePublicFieldName().toUpperCase()» = "«this.getCompositeDateTypePublicFieldName()»";
		«ELSE»
			«FOREACH this.ownedAttribute AS attr»
				«IF attr.isStatic == false»        
				/**
				 * Constant for the name of attribute "«attr.name»".
				 */
				«EXPAND java::Helper::GenerateDeprecationAnnotation FOR attr-»
				public static final String «attr.asInstanceVar().toUpperCase()» = "«attr.asInstanceVar()»";
				«ENDIF»
			«ENDFOREACH»
		«ENDIF»
	«ENDIF»
«ENDDEFINE»

«DEFINE GenerateGeneratedAnnotation FOR uml::NamedElement»
  «IF addGeneratedAnnotation()»
     @javax.annotation.Generated(«getGeneratedAnnotation()»)
  «ENDIF»
«ENDDEFINE»

«DEFINE GenerateSuppressWarningsAnnotation FOR uml::NamedElement»
  «IF suppressAllWarnings()»
     @java.lang.SuppressWarnings("all")
  «ENDIF»
  «IF getSuppressedWarnings().isEmpty == false»
  @java.lang.SuppressWarnings(«FOREACH getSuppressedWarnings() AS warning SEPARATOR ", "»"«warning»"«ENDFOREACH»)
  «ENDIF»
«ENDDEFINE»

