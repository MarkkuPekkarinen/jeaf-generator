«EXTENSION java::GeneratorCommons»
«EXTENSION java::Naming»

«DEFINE GenerateToStringMethod FOR uml::Class»
  /**
   * Method returns a StringBuilder that can be used to create a String representation of this object. The returned StringBuilder also takes care about attributes of super classes.
   *
   * @return {@link StringBuilder} StringBuilder representing this object. The method never returns null.
   */
  protected StringBuilder toStringBuilder( ) {
    «IF isTargetRuntimeJEAF()»
	    «IF this.superClass.isEmpty == true»
            StringBuilder lBuilder = new StringBuilder();
		    lBuilder.append(XFun.getMessageRepository().getMessage(XFunMessages.OBJECT_INFO, this.getClass().getName()));
		    lBuilder.append('\n');
		    lBuilder.append(XFun.getMessageRepository().getMessage(XFunMessages.OBJECT_ATTRIBUTES_SECTION));
		    lBuilder.append('\n');
	    «ELSE»
		    StringBuilder lBuilder = super.toStringBuilder();
	    «ENDIF»
	    «FOREACH this.ownedAttribute AS attribute»
		    «IF attribute.association == null && attribute.isMultivalued() == false»
		    lBuilder.append(XFun.getMessageRepository().getMessage(XFunMessages.OBJECT_ATTRIBUTE, "«attribute.name»", "" + «attribute.name»));
		    lBuilder.append('\n');
		    «ENDIF»
	    «ENDFOREACH»
    «ELSE»
	    «IF this.superClass.isEmpty == true»
            StringBuilder lBuilder = new StringBuilder();
		    lBuilder.append(this.getClass().getName());
		    lBuilder.append('\n');
		    lBuilder.append("Attributes:");
		    lBuilder.append('\n');
	    «ELSE»
		    StringBuilder lBuilder = super.toStringBuilder();
	    «ENDIF»
	    «FOREACH this.ownedAttribute AS attribute»
		    «IF attribute.association == null && attribute.isMultivalued() == false»
		    lBuilder.append("«attribute.name»: ");
		    lBuilder.append(«attribute.name»);
		    lBuilder.append('\n');
		    «ENDIF»
	    «ENDFOREACH»
    «ENDIF»
    return lBuilder;
  }
  
  /**
   * Method creates a new String with the values of all attributes of this class. All references to other objects will be ignored.
   * 
   * @return {@link String} String representation of this object. The method never returns null.
   */
  @Override
  public String toString( ) {
    return this.toStringBuilder().toString();
  }
  
«ENDDEFINE»


«DEFINE GenerateDeprecationAnnotation FOR uml::NamedElement»
	«IF this.isDeprecated()-»
	@Deprecated
	«ENDIF-»
«ENDDEFINE»

«DEFINE GenerateConstantsForAttributeNames FOR uml::Class»
	«IF generateConstantsForAttributeNames() == true»
		«FOREACH this.ownedAttribute AS attr»
			«IF attr.isStatic == false»        
			/**
			 * Constant for the name of attribute "«attr.name»".
			 */
			«EXPAND java::Helper::GenerateDeprecationAnnotation FOR attr-»
			public static final String «attr.asInstanceVar().toUpperCase()» = "«attr.asInstanceVar()»";
			«ENDIF»
		«ENDFOREACH»
	«ENDIF»
«ENDDEFINE»

«DEFINE GenerateGeneratedAnnotation FOR uml::NamedElement»
  «IF addGeneratedAnnotation()»
     @javax.annotation.Generated(«getGeneratedAnnotation()»)
  «ENDIF»
«ENDDEFINE»

«DEFINE GenerateSuppressWarningsAnnotation FOR uml::NamedElement»
  «IF suppressAllWarnings()»
     @java.lang.SuppressWarnings("all")
  «ENDIF»
  «IF getSuppressedWarnings().isEmpty == false»
  @java.lang.SuppressWarnings(«FOREACH getSuppressedWarnings() AS warning SEPARATOR ", "»"«warning»"«ENDFOREACH»)
  «ENDIF»
«ENDDEFINE»

