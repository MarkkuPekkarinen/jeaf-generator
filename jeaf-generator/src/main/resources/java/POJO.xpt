«EXTENSION java::Naming»
«EXTENSION java::ObjectMapper»
«EXTENSION java::GeneratorCommons»
«EXTENSION entity::ModelProperties»

«IMPORT JMM»

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Generate POJO class 
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
«DEFINE POJOClass FOR POJO»
	«IF generatePOJOs() == true»
		«IF this.ownedOperation.size == 0 && this.hasCustomImplementation == false»
			«FILE packagePath() + "/" + name +".java" GenBase»
				«getFileHeader()»
				package «this.packageName()»;
				
				import com.anaptecs.jeaf.xfun.api.XFunMessages;
				import com.anaptecs.jeaf.xfun.api.XFun;
				 
				«this.getJavadoc()»
				«EXPAND java::Helper::GenerateGeneratedAnnotation»
				«EXPAND java::Helper::GenerateSuppressWarningsAnnotation»
				«EXPAND java::Validation::ValidationAnnotation»
				«EXPAND java::Helper::GenerateDeprecationAnnotation-»
				«EXPAND java::Jackson::JacksonClassAnnotations -»				
				public «IF isAbstract»abstract«ENDIF» class «name» «EXPAND SuperClassDeclaration» «EXPAND InterfaceDeclarations» {
					«REM»Generate constants for all real attributes«ENDREM»
					«EXPAND java::Helper::GenerateConstantsForAttributeNames FOR ((uml::Class) this)»
					  
					«IF needsToImplementIdentifiable() == true»
						«EXPAND java::Identifiable::GenerateIdentifiableDeclaration (this.getObjectIDClassName())»
					«ENDIF»
					
					«EXPAND Attribute::PropertyDeclaration FOREACH ownedAttribute»
					
					/**
					 * Default constructor is only intended to be used for deserialization as many frameworks required that. For "normal" object creation builder should be used instead.
					 */
					protected «name»( ) {
					  «IF needsToImplementIdentifiable() == true»
					  objectID = null;
					  «ELSE»«IF this.requiresAttributeInitValue() == false»
					  // Nothing to do.
					  «ENDIF»
					  «ENDIF»
					  «FOREACH this.ownedAttribute AS attr»
						  «IF attr.isReadOnly == true && attr.isStatic == false»
						  	«IF attr.type.isPrimitiveType() == true»
							  «IF attr.isMultivalued() == false»
							  	«IF attr.isRealInitValue()»
							  		«attr.name» = «attr.initValue()»;
							  	«ELSE»
							  		«attr.name» = «attr.getPrimitiveDefaultValue()»;
							  	«ENDIF»
							  «ELSE»
							  	«attr.name» = null;
							  «ENDIF»
						    «ELSE»
								«IF attr.isMultivalued() == false»
								«attr.name» = null;
								«ENDIF»
							«ENDIF»
						  «ELSE»
							  «IF attr.isRealInitValue() && attr.isStatic == false »
                                  «attr.name» = «IF attr.isJEAFEnumeration()»«attr.type.name».«ENDIF»«attr.initValue()»;
							  «ENDIF»
						  «ENDIF»
						  «IF attr.isTransientBidirectionalBackReference()»
						    // Bidirectional back reference is not yet set up correctly
						    «attr.asInstanceVar()»BackReferenceInitialized = false;
						  «ENDIF»
					  «ENDFOREACH»
					}

					/**
					 * Initialize object using the passed builder.
					 * 
					 * @param pBuilder Builder that should be used to initialize this object. The parameter must not be null.
					 */
					protected «name»(Builder pBuilder) {
						«IF superClass.isEmpty == false»        
						// Call constructor of super class.
						super(pBuilder);
						«ELSE»
						«IF isTargetRuntimeJEAF()»
						// Ensure that builder is not null.
						com.anaptecs.jeaf.xfun.api.checks.Check.checkInvalidParameterNull(pBuilder, "pBuilder");
						«ENDIF»
						«ENDIF»
						«IF needsToImplementIdentifiable() == true»
						// Read object ID.
						com.anaptecs.jeaf.xfun.api.common.ObjectIdentity<?> lObjectID = pBuilder.objectID;
						if (lObjectID != null) {
							objectID = new «this.getObjectIDClassName()»(pBuilder.objectID);
					    }
					    else {
					      objectID = null;
					    }
						«ENDIF»
						«IF this.ownedAttribute.size > 0»
						// Read attribute values from builder.
						«ENDIF»
						«FOREACH this.ownedAttribute AS attr»
						  «IF attr.association == null»
						  	«IF attr.isStatic == false»«attr.name» = pBuilder.«attr.name»;«ENDIF»
						  «ELSE»
						  	«IF attr.isMultivalued()»
					        	«IF attr.isStatic == false»
					        	if(pBuilder.«attr.name» != null) {
					        	    «attr.name».addAll(pBuilder.«attr.name»);
					        	}
					        	«ENDIF»
						  	«ELSE»
								«IF attr.isStatic == false»«attr.name» = pBuilder.«attr.name»;«ENDIF»			  	
						  	«ENDIF»
						  «ENDIF»			  
						  «IF attr.isTransientBidirectionalBackReference()»
							// Bidirectional back reference is set up correctly as a builder is used.
							«attr.asInstanceVar()»BackReferenceInitialized = true;
						  «ENDIF»
						«ENDFOREACH»
					}
					  
					«REM»Generate builder«ENDREM»
					«EXPAND java::Builder::GenerateBuilder (this.getObjectIDClassName())»
					
					«IF needsToImplementIdentifiable() == true»
					«EXPAND java::Identifiable::GenerateIdentifiableGetters (this.getObjectIDClassName())»
					«ENDIF»
					
					«EXPAND Attribute::PropertyAccessors FOREACH ownedAttribute»
					«EXPAND java::Helper::GenerateToStringMethod»
				}
			«ENDFILE»
			  
		«REM»POJO has own methods«ENDREM»
		«ELSE»
			«REM»Generate base class«ENDREM»
			«FILE packagePath() + "/" + name +"Base.java" GenBase»
				«getFileHeader()»
				package «this.packageName()»;
				  
				import com.anaptecs.jeaf.xfun.api.XFunMessages;
				import com.anaptecs.jeaf.xfun.api.XFun;        
				  
				«this.getJavadoc()»
				«EXPAND java::Helper::GenerateGeneratedAnnotation»
				«EXPAND java::Helper::GenerateSuppressWarningsAnnotation»
		        «EXPAND java::Validation::ValidationAnnotation -»      
			    «EXPAND java::Helper::GenerateDeprecationAnnotation-»
			    «EXPAND java::Jackson::JacksonClassAnnotations -»
				public abstract class «name»Base «EXPAND SuperClassDeclaration» «EXPAND InterfaceDeclarations» {
					«REM»Generate constants for all real attributes«ENDREM»
					«EXPAND java::Helper::GenerateConstantsForAttributeNames FOR ((uml::Class) this)»
					  
					«IF needsToImplementIdentifiable() == true»
						«EXPAND java::Identifiable::GenerateIdentifiableDeclaration (this.getObjectIDClassName())»
					«ENDIF»
					
					«EXPAND Attribute::PropertyDeclaration FOREACH ownedAttribute»
					
					/**
					 * Default constructor is only intended to be used for deserialization as many frameworks required that. For "normal" object creation builder should be used instead.
					 */
					protected «name»Base( ) {
					  «IF needsToImplementIdentifiable() == true»
					  objectID = null;
					  «ELSE»«IF this.requiresAttributeInitValue() == false»
					  // Nothing to do.
					  «ENDIF»
					  «ENDIF»
					  «FOREACH this.ownedAttribute AS attr»
						  «IF attr.isReadOnly == true && attr.isStatic == false»
							  «IF attr.type.isPrimitiveType() == true»
								  «IF attr.isMultivalued() == false»
								  	«IF attr.isRealInitValue()»
								  		«attr.name» = «attr.initValue()»;
								  	«ELSE»
								  		«attr.name» = «attr.getPrimitiveDefaultValue()»;
								  	«ENDIF»
								  «ELSE»
								  	«attr.name» = null;
								  «ENDIF»
							  «ELSE»
								  «IF attr.isMultivalued() == false»
								  	«attr.name» = null;
								  «ENDIF»
							  «ENDIF»
						  «ELSE»
							  «IF attr.isRealInitValue() && attr.isStatic == false »
                                  «attr.name» = «IF attr.isJEAFEnumeration()»«attr.type.name».«ENDIF»«attr.initValue()»;
							  «ENDIF»
						  «ENDIF»
						  «IF attr.isTransientBidirectionalBackReference()»
						    // Bidirectional back reference is not yet set up correctly
						    «attr.asInstanceVar()»BackReferenceInitialized = false;
						  «ENDIF»
					  «ENDFOREACH»
					}

					/**
					 * Initialize object using the passed builder.
					 * 
					 * @param pBuilder Builder that should be used to initialize this object. The parameter must not be null.
					 */
					protected «name»Base(BuilderBase pBuilder) {
					«IF superClass.isEmpty == false»        
					// Call constructor of super class.
					super(pBuilder);
					«ELSE»
					«IF isTargetRuntimeJEAF()»
					// Ensure that builder is not null.
					com.anaptecs.jeaf.xfun.api.checks.Check.checkInvalidParameterNull(pBuilder, "pBuilder");
					«ENDIF»
					«ENDIF»
					«IF needsToImplementIdentifiable() == true»
					// Read object ID.
					com.anaptecs.jeaf.xfun.api.common.ObjectIdentity<?> lObjectID = pBuilder.objectID;
					if (lObjectID != null) {
						objectID = new «this.getObjectIDClassName()»(pBuilder.objectID);
				    }
				    else {
				      objectID = null;
				    }
					«ENDIF»
					«IF this.ownedAttribute.size > 0»
					// Read attribute values from builder.
					«ENDIF»
					«FOREACH this.ownedAttribute AS attr»
					  «IF attr.association == null»
					  	«IF attr.isStatic == false»«attr.name» = pBuilder.«attr.name»;«ENDIF»
					  «ELSE»
					  	«IF attr.isMultivalued()»
				        	«IF attr.isStatic == false»
				        	if(pBuilder.«attr.name» != null) {
				        	    «attr.name».addAll(pBuilder.«attr.name»);
				        	}
				        	«ENDIF»
					  	«ELSE»
							«IF attr.isStatic == false»«attr.name» = pBuilder.«attr.name»;«ENDIF»			  	
					  	«ENDIF»
					  «ENDIF»			  
					  «IF attr.isTransientBidirectionalBackReference()»
						// Bidirectional back reference is set up correctly as a builder is used.
						«attr.asInstanceVar()»BackReferenceInitialized = true;
					  «ENDIF»
					«ENDFOREACH»
					}
					
					«REM»Generate builder«ENDREM»
					«EXPAND java::Builder::GenerateBuilderBase (this.getObjectIDClassName())»
					
					«IF needsToImplementIdentifiable() == true»
						«EXPAND java::Identifiable::GenerateIdentifiableGetters (this.getObjectIDClassName())»
					«ENDIF»
					
					«EXPAND Attribute::PropertyAccessors FOREACH ownedAttribute»
					«EXPAND jeaf::JEAFOperation::PersistentObjectOperation FOREACH ownedOperation»
					«EXPAND java::Helper::GenerateToStringMethod»
				}
			«ENDFILE»
				
			«REM»Generate class with parts that can / need be implemented by developers«ENDREM»
			«FILE packagePath() + "/" + name +".java" GenOnce»
				«getFileHeader()»
				package «this.packageName()»;
				  
				«this.getJavadoc()»
				«EXPAND java::Validation::ValidationAnnotation»
				«EXPAND java::Helper::GenerateDeprecationAnnotation -»
				public «IF isAbstract»abstract«ENDIF» class «name» extends «name»Base {
					/**
					 * Default constructor is only intended to be used for deserialization as many frameworks required that. For "normal" object creation builder should be used instead.
					 */
					protected «name»( ) {
					}
		
					/**
					 * Initialize object. Nothing special to do.
					 */
					protected «name»( «name».BuilderBase pBuilder ) {
					  super(pBuilder);
					}
					  
					«EXPAND java::Builder::GenerateBuilderImpl»
					
					«EXPAND jeaf::JEAFOperation::PersistentObjectOperationImpl FOREACH ownedOperation»
				}
			«ENDFILE»
		«ENDIF»
	«ENDIF»
	
	«REM»Generate Object Mappers for POJO«ENDREM»
	«EXPAND java::ObjectMapper::GenerateObjectMappers»
«ENDDEFINE»

«DEFINE SuperClassDeclaration FOR POJO»
	«IF !superClass.isEmpty» extends «superClass.get(0).fqn()»«ENDIF»
«ENDDEFINE»

«DEFINE InterfaceDeclarations FOR POJO»
	«IF needsToImplementIdentifiable()==true» implements com.anaptecs.jeaf.xfun.api.common.Identifiable<«this.getObjectIDClassName()»>«ENDIF»
«ENDDEFINE»

