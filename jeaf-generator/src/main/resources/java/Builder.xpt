«EXTENSION java::Naming»
«EXTENSION java::ObjectMapper»
«EXTENSION java::GeneratorCommons»
«EXTENSION java::OpenAPIFunctions»
«EXTENSION java::Naming»
«EXTENSION entity::ModelProperties»
«IMPORT uml»
«IMPORT JMM»

«DEFINE GenerateBuilder(String idImpl) FOR uml::Class»
/**
 * Class implements builder to create a new instance of class <code>«this.name»</code>.
 */
«EXPAND java::Helper::GenerateDeprecationAnnotation-»
public static «IF isAbstract == true» abstract «ENDIF»class Builder «IF superClass.isEmpty == false»extends «superClass.get(0).fqn()».Builder«ENDIF» {
	«REM»Generate instance variables for each property«ENDREM»
	«IF needsToImplementIdentifiable() == true»
	/**
	 * Reference to the identifier of this object. The reference may be null since an id is not mandatory.
	 */
	private com.anaptecs.jeaf.xfun.api.common.ObjectIdentity<?> objectID;
	«ENDIF»
	«IF this.isCompositeDataType()»
		/**
		 * String representation of this object.
		 */
		private String «this.getCompositeDateTypePublicFieldName()»;
	«ELSE»
		«FOREACH this.ownedAttribute.select(e|e.isPropertySuppressed() == false) AS attr»
		«EXPAND BuilderPropertyDeclaration FOR attr»
		«ENDFOREACH»
	«ENDIF»

    /**
     * Use {@link «name»#builder()} instead of private constructor to create new builder.
     */
    protected Builder( ) {
      «IF superClass.isEmpty == false»super();«ENDIF»
    }

    /**
     * Use {@link «name»#builder(«this.name»)} instead of private constructor to create new builder.
     */
    protected Builder( «this.name» pObject ) {
      «IF superClass.isEmpty == false»super(pObject);«ENDIF»
      if (pObject != null) {
        // Read attribute values from passed object.
		«IF needsToImplementIdentifiable() == true»
		objectID = pObject.objectID;
		«ENDIF»
        «IF this.isCompositeDataType()»
        	«this.getCompositeDateTypePublicFieldName()» = pObject.«this.getCompositeDateTypePublicFieldName()»;
        «ELSE»
	        «FOREACH this.ownedAttribute.select(e|e.isPropertySuppressed() == false) AS attr»
	        «IF attr.isStatic == false»«attr.name» = pObject.«attr.name»;«ENDIF»
	        «ENDFOREACH»
        «ENDIF»
      }
    }

   «IF isAbstract == false && enableLegacyBuilderStyle()»
    /**
     * Method returns a new builder.
     * 
     * @return {@link Builder} New builder that can be used to create new «this.name» objects.
     */
    public static Builder newBuilder( ) {
      return new Builder();
    }

    /**
     * Method creates a new builder and initialize it with the data from the passed object.
     * 
     * @param pObject Object that should be used to initialize the builder. The parameter may be null.
     * @return {@link Builder} New builder that can be used to create new «this.name» objects. The method never
     * returns null.
     */
    public static Builder newBuilder( «this.name» pObject ) {
      return new Builder(pObject);
    }
    «ENDIF»

	«IF needsToImplementIdentifiable() == true»
	/**
	 * Method sets the identifier for the object created using the builder. The reference may be null since an id is not mandatory.
	 */
	public Builder setID(com.anaptecs.jeaf.xfun.api.common.ObjectIdentity<?> pObjectID){
		objectID = pObjectID;
		return this;
	}	
	«ELSE»«IF implementsIdentifiable() == true»
	/**
	 * Method sets the identifier for the object created using the builder. The reference may be null since an id is not mandatory.
	 */
	@Override
	public Builder setID(com.anaptecs.jeaf.xfun.api.common.ObjectIdentity<?> pObjectID){
		super.setID(pObjectID);
		return this;
	}
	«ENDIF»«ENDIF»	
	
	«REM»Overwritte setters for each property of super class with this Builder class as return type.«ENDREM»
	«IF this.superClass.isEmpty == false»
		«FOREACH this.superClass.getAllAttributesFromHierarchy().select(e|e.isPropertySuppressed() == false) AS superAttr»
			«EXPAND OverwriteBuilderSetterFromBaseClasses("Builder") FOR superAttr»
		«ENDFOREACH»
	«ENDIF»
	
	«REM»Generate setters for each property of the builder«ENDREM»
	«IF this.isCompositeDataType()»
		/**
		 * Method returns the String representation of this object.
		 * 
		 * @return String String representation of this object.
		 */
		public Builder set«this.getCompositeDateTypePublicFieldName().toFirstUpper()»( String p«this.getCompositeDateTypePublicFieldName().toFirstUpper()» ) {
		  «this.getCompositeDateTypePublicFieldName()» = p«this.getCompositeDateTypePublicFieldName().toFirstUpper()»;
		  return this;
		}		
	«ELSE»
		«FOREACH this.ownedAttribute.select(e|e.isPropertySuppressed() == false) AS attr»
			«EXPAND BuilderSetter("Builder") FOR attr»
		«ENDFOREACH»
	«ENDIF»
	
	«IF this.isAbstract == false»
	/**
	 * Method creates a new instance of class «this.name». The object will be initialized with the values of the
	 * builder.
	 * 
	 * @return «this.name» Created object. The method never returns null.
	 */
	public «this.name» build( ) {
	  return new «this.name»(this);
	}

	«IF isTargetRuntimeJEAF()»
	/**
	 * Method creates a new validated instance of class «this.name». The object will be initialized with the values of the
	 * builder and validated afterwards.
	 * 
	 * @return «this.name» Created and validated object. The method never returns null.
	 * @throws ConstraintViolationException in case that one or more validations for the created object failed.
	 */
	public «this.name» buildValidated( ) throws javax.validation.ConstraintViolationException {
      «this.name» lPOJO = this.build();
      com.anaptecs.jeaf.tools.api.validation.ValidationTools.getValidationTools().enforceObjectValidation(lPOJO);
      return lPOJO;
	}
	«ENDIF»
	«ENDIF»
}
«ENDDEFINE»

«DEFINE GenerateBuilderBase(String idImpl) FOR uml::Class»
/**
 * Class implements builder to create a new instance of class «this.name». As the class has read only attributes or associations instances can not be created directly. Instead this builder class has to be used.
 */
public static abstract class BuilderBase «IF superClass.isEmpty == false»extends «superClass.get(0).fqn()».Builder«ENDIF» {
	«REM»Generate instance variables for each property«ENDREM»
	«IF needsToImplementIdentifiable() == true»
	/**
	 * Reference to the identifier of this object. The reference may be null since an id is not mandatory.
	 */
	private com.anaptecs.jeaf.xfun.api.common.ObjectIdentity<?> objectID;
	«ENDIF»

	«IF this.isCompositeDataType()»
		/**
		 * String representation of this object.
		 */
		private String «this.getCompositeDateTypePublicFieldName()»;
	«ELSE»
		«FOREACH this.ownedAttribute AS attr»
		«EXPAND BuilderPropertyDeclaration FOR attr»
		«ENDFOREACH»
	«ENDIF»

    /**
     * Use {@link «this.name».builder()} instead of protected constructor to create new builder.
     */
    protected BuilderBase( ) {
      «IF superClass.isEmpty == false && superClass.get(0).hasReadOnlyProperties()== true»super();«ENDIF»
    }

    /**
     * Use {@link «this.name».builder(«this.name»)} instead of protected constructor to create new builder.
     */
    protected BuilderBase( «this.name»Base pObject ) {
      «IF superClass.isEmpty == false && superClass.get(0).hasReadOnlyProperties()== true»super(pObject);«ENDIF»
      if (pObject != null) {
        // Read attribute values from passed object.
		«IF needsToImplementIdentifiable() == true»
		objectID = pObject.objectID;
		«ENDIF»

        «IF this.isCompositeDataType()»
        	«this.getCompositeDateTypePublicFieldName()» = pObject.«this.getCompositeDateTypePublicFieldName()»;
        «ELSE»
	        «FOREACH this.ownedAttribute AS attr»
	        «IF attr.isStatic == false»«attr.name» = pObject.«attr.name»;«ENDIF»
	        «ENDFOREACH»
        «ENDIF»
      }
    }

	«IF needsToImplementIdentifiable() == true»
	/**
	 * Method sets the identifier for the object created using the builder. The reference may be null since an id is not mandatory.
	 */
	public BuilderBase setID(com.anaptecs.jeaf.xfun.api.common.ObjectIdentity<?> pObjectID){
		objectID = pObjectID;
		return this;
	}
	«ELSE»«IF implementsIdentifiable() == true»
	/**
	 * Method sets the identifier for the object created using the builder. The reference may be null since an id is not mandatory.
	 */
	@Override 
	public BuilderBase setID(com.anaptecs.jeaf.xfun.api.common.ObjectIdentity<?> pObjectID){
		super.setID(pObjectID);
		return this;
	}
	«ENDIF»«ENDIF»
	
	«REM»Overwritte setters for each property of super class with this Builder class as return type.«ENDREM»
	«IF this.superClass.isEmpty == false»
		«FOREACH this.superClass.getAllAttributesFromHierarchy().select(e|e.isPropertySuppressed() == false) AS superAttr»
			«EXPAND OverwriteBuilderSetterFromBaseClasses("BuilderBase") FOR superAttr»
		«ENDFOREACH»
	«ENDIF»
	
	«REM»Generate setters for each property of the builder«ENDREM»
	«IF this.isCompositeDataType()»
		/**
		 * Method returns the String representation of this object.
		 * 
		 * @return String String representation of this object.
		 */
		public BuilderBase set«this.getCompositeDateTypePublicFieldName().toFirstUpper()»( String p«this.getCompositeDateTypePublicFieldName().toFirstUpper()» ) {
		  «this.getCompositeDateTypePublicFieldName()» = p«this.getCompositeDateTypePublicFieldName().toFirstUpper()»;
		  return this;
		}		
	«ELSE»
		«FOREACH this.ownedAttribute AS attr»
			«EXPAND BuilderSetter("BuilderBase") FOR attr»
		«ENDFOREACH»
	«ENDIF»

	«IF this.isAbstract == false»
	/**
	 * Method creates a new instance of class «this.name». The object will be initialized with the values of the
	 * builder.
	 * 
	 * @return «this.name» Created object. The method never returns null.
	 */
	public «this.name» build( ) {
	  return new «this.name»(this);
	}

	«IF isTargetRuntimeJEAF()»
	/**
	 * Method creates a new validated instance of class «this.name». The object will be initialized with the values of the
	 * builder and validated afterwards.
	 * 
	 * @return «this.name» Created and validated object. The method never returns null.
	 * @throws ConstraintViolationException in case that one or more validations for the created object failed.
	 */
	public «this.name» buildValidated( ) throws javax.validation.ConstraintViolationException {
      «this.name» lPOJO = this.build();
      com.anaptecs.jeaf.tools.api.validation.ValidationTools.getValidationTools().enforceObjectValidation(lPOJO);
      return lPOJO;
	}
	«ENDIF»
	«ENDIF»
}
«ENDDEFINE»

«DEFINE BuilderPropertyDeclaration FOR Property»
    «IF this.isStatic == false»
	    «EXPAND functions::Javadoc::JavadocForProperty»
	    «IF this.isSoftLink()»
	       «EXPAND SoftLinkBuilderPropertyDeclaration FOR ((SoftLink) this)»
	    «ELSEIF this.association == null»
	        «EXPAND DoBuilderPropertyDeclaration»
	    «ELSE»
	        «EXPAND DoBuilderAssociationPropertyDeclaration»
	    «ENDIF»
    «ENDIF»
«ENDDEFINE»


// processing the properties
«DEFINE DoBuilderPropertyDeclaration FOR Property»
	«EXPAND java::Helper::GenerateDeprecationAnnotation-»
    «EXPAND Validation::ValidationAnnotation»
	private «this.fqn()»«IF isMultivalued()»[]«ENDIF» «name»«IF this.isRealInitValue() && this.isMultivalued()== false » = «IF this.isJEAFEnumeration()»«this.type.name».«ENDIF»«this.initValue()»«ENDIF»;
«ENDDEFINE»

«DEFINE DoBuilderAssociationPropertyDeclaration FOR Property»
	«IF isNavigable()»
		«EXPAND java::Helper::GenerateDeprecationAnnotation-»
		«IF isMultivalued()»
			private «this.fqn()» «asInstanceVar()»;
		«ELSE»
			private «type.fqn()» «asInstanceVar()»«IF this.isRealInitValue() && this.isMultivalued()== false » = «IF this.isJEAFEnumeration()»«this.type.name».«ENDIF»«this.initValue()»«ENDIF»;
		«ENDIF»
	«ENDIF»
«ENDDEFINE»

«DEFINE SoftLinkBuilderPropertyDeclaration FOR SoftLink»
        «EXPAND java::Helper::GenerateDeprecationAnnotation-»
        «EXPAND Validation::ValidationAnnotation»
        «IF isMultivalued()»
            «IF generateValidationAnnotationsForAssociationsFromMultiplicity() && isStatic == false && isTransient() == false && this.hasValidationStereotype() == false && lower > 0»@javax.validation.constraints.Size(min = «lower»)«ENDIF»
            «IF generateValidationAnnotationsForAssociationsFromMultiplicity() && isStatic == false && isTransient() == false && this.requiresNotNullAnnotation() && lower > 0»@javax.validation.constraints.NotNull«ENDIF»
            «visibility» «IF isTransient()»transient «ENDIF» «this.getCollectionType()»<«this.getMultivaluedSoftLinkType()»> «asInstanceVar()»;
        «ELSE»
            «IF generateValidationAnnotationsForAssociationsFromMultiplicity() && isStatic == false && isTransient() == false && this.requiresNotNullAnnotation() && lower > 0»@javax.validation.constraints.NotNull«ENDIF»
            «visibility» «IF isTransient()»transient «ENDIF» «this.getSoftLinkType()» «asInstanceVar()»;
        «ENDIF»
«ENDDEFINE»


«DEFINE BuilderSetter(String builderClassName) FOR Property»
    «IF this.isStatic == false»
	    «IF this.isSoftLink()»
	       «EXPAND CreateBuilderSoftLinkSetter(builderClassName) FOR ((SoftLink) this)»
	    «ELSEIF this.association == null»
	        «EXPAND CreateBuilderPropertySetter(builderClassName)»
	    «ELSE»
	        «EXPAND CreateBuilderAssociationSetter(builderClassName)»
	    «ENDIF»
	    «IF this.isMultivalued() && this.type.isEnumeration()»
	    	«EXPAND CreateBuilderVarArgsSetter(builderClassName)»
	    «ENDIF»
    «ENDIF»
«ENDDEFINE»

«DEFINE CreateBuilderPropertySetter(String builderClassName) FOR Property»
	«EXPAND functions::Javadoc::JavadocForBuilderSetter(builderClassName)»
	«EXPAND java::Helper::GenerateDeprecationAnnotation-»
	public «builderClassName» «asSetter()»(«this.fqn()»«IF isMultivalued()»[]«ENDIF» «asParameter()») {
		// Assign value to attribute
		«IF this.isMultivalued() == false»
			«asInstanceVar()»=«asParameter()»;
		«ELSE»
			if(«asParameter()» != null) {
			«IF this.isBinaryType()»
				«IF disableBinaryDataImmutability()»
					«asInstanceVar()» = «asParameter()»;
				«ELSE»
					«asInstanceVar()» = new «this.fqn()»[«asParameter()».length];
					System.arraycopy(«asParameter()», 0, «asInstanceVar()», 0, «asParameter()».length);
				«ENDIF»
			«ELSE»
				«IF disableArrayImmutability()»
					«asInstanceVar()» = «asParameter()»;
				«ELSE»
					«asInstanceVar()» = new «this.fqn()»[«asParameter()».length];
					System.arraycopy(«asParameter()», 0, «asInstanceVar()», 0, «asParameter()».length);
				«ENDIF»
			«ENDIF»
			}
			else {
				«asInstanceVar()» = null;
			}
		«ENDIF»
		return this;
	}
«ENDDEFINE»

«DEFINE CreateBuilderAssociationSetter(String builderClassName) FOR Property»
	«IF isNavigable()»
        «EXPAND functions::Javadoc::JavadocForBuilderSetter(builderClassName)»
        «EXPAND java::Helper::GenerateDeprecationAnnotation-»
		«IF isMultivalued()»
			public «builderClassName» set«name.toFirstUpper()»(«this.fqn()» «asParameter()») {
			    // To ensure immutability we have to copy the content of the passed collection.
			    if(«asParameter()» != null) {
			      «asInstanceVar()» = new «this.getCollectionImplType()»<«type.fqn()»>(«asParameter()»);
			    }
			    else {
			      «asInstanceVar()» = null;
			    }
			    return this;
			}
		«ELSE»
			public «builderClassName» «asSetter()» («type.fqn()» «asParameter()») {
				«asInstanceVar()» = «asParameter()»;
				return this;
			}
		«ENDIF»
	«ENDIF»
«ENDDEFINE»

«DEFINE CreateBuilderSoftLinkSetter(String builderClassName) FOR SoftLink»
    «IF isNavigable()»
        «EXPAND functions::Javadoc::JavadocForBuilderSetter(builderClassName)»
        «EXPAND java::Helper::GenerateDeprecationAnnotation-»
        «IF isMultivalued()»
            public «builderClassName» set«name.toFirstUpper()»(«this.getCollectionType()»<«this.getMultivaluedSoftLinkType()»> «asParameter()») {
                // To ensure immutability we have to copy the content of the passed collection.
                if(«asParameter()» != null) {
                  «asInstanceVar()» = new «this.getCollectionImplType()»<«this.getMultivaluedSoftLinkType()»>(«asParameter()»);
                }
                else {
                  «asInstanceVar()» = null;
                }
                return this;
            }
        «ELSE»
            public «builderClassName» «asSetter()» («this.getSoftLinkType()» «asParameter()») {
                «asInstanceVar()» = «asParameter()»;
                return this;
            }
        «ENDIF»
    «ENDIF»
«ENDDEFINE»


«DEFINE CreateBuilderVarArgsSetter(String builderClassName) FOR Property»
	«IF isNavigable()»
		«IF isMultivalued()»
			«EXPAND functions::Javadoc::JavadocForBuilderVarArgsSetter(builderClassName)»
			«EXPAND java::Helper::GenerateDeprecationAnnotation-»
			public «builderClassName» set«name.toFirstUpper()»(«this.type.fqn()»... «asParameter()») {
			    // To ensure immutability we have to copy the content of the passed array.
			    if(«asParameter()» != null) {
			      «asInstanceVar()» = new «this.getCollectionImplType()»<«type.fqn()»>(java.util.Arrays.asList(«asParameter()»));
			    }
			    else {
			      «asInstanceVar()» = null;
			    }
			    return this;
			}
		«ENDIF»
	«ENDIF»
«ENDDEFINE»


«DEFINE OverwriteBuilderSetterFromBaseClasses(String builderClassName) FOR Property»
    «IF this.isStatic == false»
	    «IF this.isSoftLink()»
	       «EXPAND OverwriteBuilderSoftLinkSetter(builderClassName) FOR ((SoftLink) this)»
	    «ELSEIF this.association == null»
	        «EXPAND OverwriteBuilderPropertySetter(builderClassName)»
	    «ELSE»
	        «EXPAND OverwriteBuilderAssociationSetter(builderClassName)»
	    «ENDIF»
    «ENDIF»
«ENDDEFINE»

«DEFINE OverwriteBuilderPropertySetter(String builderClassName) FOR Property»
	«EXPAND functions::Javadoc::JavadocForBuilderSetter(builderClassName)»
	«EXPAND java::Helper::GenerateDeprecationAnnotation-»
	@Override
	public «builderClassName» «asSetter()»(«this.fqn()»«IF isMultivalued()»[]«ENDIF» «asParameter()») {
		// Call super class implementation.
		super.«asSetter()»(«asParameter()»);
		return this;
	}
«ENDDEFINE»

«DEFINE OverwriteBuilderAssociationSetter(String builderClassName) FOR Property»
	«IF isNavigable()»
	    «EXPAND functions::Javadoc::JavadocForBuilderSetter(builderClassName)»
	    «EXPAND java::Helper::GenerateDeprecationAnnotation-»
		«IF isMultivalued()»
			@Override
			public «builderClassName» set«name.toFirstUpper()»(«this.fqn()» «asParameter()») {
				// Call super class implementation.
				super.set«name.toFirstUpper()»(«asParameter()»);
				return this;
			}
		«ELSE»
			@Override
			public «builderClassName» «asSetter()» («type.fqn()» «asParameter()») {
				// Call super class implementation.
				super.«asSetter()»(«asParameter()»);
				return this;
			}
		«ENDIF»
	«ENDIF»
«ENDDEFINE»

«DEFINE OverwriteBuilderSoftLinkSetter(String builderClassName) FOR SoftLink»
    «IF isNavigable()»
	    «EXPAND functions::Javadoc::JavadocForBuilderSetter(builderClassName)»
	    «EXPAND java::Helper::GenerateDeprecationAnnotation-»
        «IF isMultivalued()»
            @Override
            public «builderClassName» set«name.toFirstUpper()»(«this.getCollectionType()»<«this.getMultivaluedSoftLinkType()»> «asParameter()») {
                // Call super class implementation.
                super.set«name.toFirstUpper()»(«asParameter()»);
                return this;
            }
        «ELSE»
            @Override
            public «builderClassName» «asSetter()» («this.getSoftLinkType()» «asParameter()») {
                // Call super class implementation.
                super.«asSetter()»(«asParameter()»);
                return this;
            }
        «ENDIF»
    «ENDIF»
«ENDDEFINE»

«DEFINE GenerateBuilderImpl FOR uml::Class»
	/**
	 * Class implements builder to create a new instance of class «this.name». As the class has readonly attributes
	 * or associations instances can not be created directly. Instead this builder class has to be used.
	 */
	public static class Builder extends «this.name».BuilderBase {
	  /**
	   * Use {@link «name»#builder()} instead of protected constructor to create new builder.
	   */
	  protected Builder( ) {
	  }
	
	  /**
	   * Use {@link «name»#builder(«this.name»)} instead of protected constructor to create new builder.
	   */
	  protected Builder( «this.name» pObject ) {
	    super(pObject);
	  }
	
	  «IF isAbstract == false && enableLegacyBuilderStyle()»
	  /**
	   * Method returns a new builder.
	   * 
	   * @return {@link Builder} New builder that can be used to create new «this.name» objects.
	   */
	  public static Builder newBuilder( ) {
	    return new Builder();
	  }
	
	  /**
	   * Method creates a new builder and initialize it with the data from the passed object.
	   * 
	   * @param pObject Object that should be used to initialize the builder. The parameter may be null.
	   * @return {@link Builder} New builder that can be used to create new POJOWithIDnMethod objects. The method never
	   * returns null.
	   */
	  public static Builder newBuilder( «this.name» pObject ) {
	    return new Builder(pObject);
	  }
	  «ENDIF»
	}
«ENDDEFINE»

«DEFINE StaticBuilderMethods FOR uml::Class»
   «IF isAbstract == false»
    /**
     * Method returns a new builder.
     * 
     * @return {@link Builder} New builder that can be used to create new «this.name» objects.
     */
    public static Builder builder( ) {
      return new Builder();
    }

    /**
     * Method creates a new builder and initialize it with the data from the passed object.
     * 
     * @param pObject Object that should be used to initialize the builder. The parameter may be null.
     * @return {@link Builder} New builder that can be used to create new «this.name» objects. The method never
     * returns null.
     */
    public static Builder builder( «this.name» pObject ) {
      return new Builder(pObject);
    }
    
   «IF generateBuilderMethodWithAllManadatoryFields() && this.getRequiredPropertiesForBuilder().size > 0 && this.isCompositeDataType() == false»
   /**
    * Method creates a new builder and initializes it with the passed attributes.
    */
    public static Builder builder(«FOREACH this.getRequiredPropertiesForBuilder() AS property SEPARATOR ", "» «IF property.isSoftLink()»«((SoftLink) property).getSoftLinkType()» «ELSE»«property.type.fqn()» «ENDIF»p«property.name.toFirstUpper()»«ENDFOREACH») {
      Builder lBuilder = builder( );
      «FOREACH this.getRequiredPropertiesForBuilder() AS property-»
			lBuilder.«property.asSetter()»(p«property.name.toFirstUpper()»);
		«ENDFOREACH -»
	  return lBuilder;
    }
    «ENDIF»
    
    «IF this.isCompositeDataType() »
    public static Builder builder(String p«this.getCompositeDateTypePublicFieldName().toFirstUpper()») {
      Builder lBuilder = builder( );
      lBuilder.set«this.getCompositeDateTypePublicFieldName().toFirstUpper()»(p«this.getCompositeDateTypePublicFieldName().toFirstUpper()»);
      return lBuilder;
    }
    «ENDIF»
    «ENDIF»
«ENDDEFINE»


