«EXTENSION java::Naming»
«EXTENSION java::ObjectMapper»
«EXTENSION java::GeneratorCommons»
«EXTENSION org::openarchitectureware::util::stdlib::io»
«EXTENSION entity::ModelProperties»
«EXTENSION java::OpenAPIFunctions»

«IMPORT uml»
«IMPORT JMM»


«DEFINE JacksonClassAnnotations FOR Class»
	«IF generateJacksonAnnotations() && this.isStereotypeApplied("BeanParam") == false»
		«IF enableSemVerForJSON() == true»
		@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
		«ENDIF»
		«IF this.superClass.size == 0 && this.getSubclasses().size > 0 »
		«IF enableSemVerForJSON() == false»
		@com.fasterxml.jackson.annotation.JsonIgnoreProperties(value = "objectType")
		«ENDIF»
		@com.fasterxml.jackson.annotation.JsonTypeInfo(use = com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME, include = com.fasterxml.jackson.annotation.JsonTypeInfo.As.PROPERTY, property = "objectType", visible = true)
		@com.fasterxml.jackson.annotation.JsonSubTypes({
		«EXPAND SubtypesAnnotation -»
		 })
		«ENDIF»
		«IF needsToImplementIdentifiable() == true»
		@com.fasterxml.jackson.annotation.JsonIdentityInfo(property = "objectID", generator = com.fasterxml.jackson.annotation.ObjectIdGenerators.PropertyGenerator.class)
		«ENDIF»
	«ENDIF»
«ENDDEFINE»

«DEFINE SubtypesAnnotation FOR Class»
	«FOREACH this.getSubclasses().typeSelect(Class) AS subclass SEPARATOR "," »
	@com.fasterxml.jackson.annotation.JsonSubTypes.Type(value = «subclass.fqn()».class, name = "«subclass.name»")
		«IF subclass.getSubclasses().size >0»,
			«EXPAND SubtypesAnnotation FOR subclass»
		«ENDIF»
	«ENDFOREACH»
«ENDDEFINE»

«DEFINE JSONAlias FOR Property»
	«IF generateJacksonAnnotations() && this.isStereotypeApplied("OpenAPIAliasName") == true»
		@com.fasterxml.jackson.annotation.JsonProperty("«((OpenAPIAliasName)this).openAPIPropertyName»")
	«ENDIF»
«ENDDEFINE»

«DEFINE GenerateModuleFactory FOR ModuleFactory -»
	«FILE packagePath() + "/" + name + ".java" GenBase»
		«getFileHeader()»
		package «this.packageName()»;
		
		«EXPAND java::Helper::GenerateDeprecationAnnotation-»
		/**
		 * Factory assembles all configured serializers / deserializers into a module.
		 */
		«IF isTargetRuntimeJEAF()»
		@com.anaptecs.jeaf.json.annotations.ModuleFactory
		«ENDIF»
		public class «name» «IF isTargetRuntimeJEAF()»implements com.anaptecs.jeaf.json.api.ObjectMapperModuleFactory«ENDIF» {
			/**
			 * Method creates a module that consists of all serializers / deserializers of the current package.
			 */
			«IF isTargetRuntimeJEAF()»
			@Override
			«ENDIF»
			public com.fasterxml.jackson.databind.Module createModule( ) {
				// Create module for serializers / deserializers that are located in this package
				com.fasterxml.jackson.databind.module.SimpleModule lModule = new com.fasterxml.jackson.databind.module.SimpleModule(this.getClass().getName());
				
				// Add serializers and deserializers for datatypes				
				«FOREACH this.clientDependency.supplier.typeSelect(uml::Package).allOwnedElements().typeSelect(OpenAPIDataType).sortBy(e|e.name) AS datatype»
				lModule.addSerializer(«datatype.fqn()».class, new «datatype.packageName()».serializers.«datatype.name»Serializer());
				lModule.addDeserializer(«datatype.fqn()».class, new «datatype.packageName()».serializers.«datatype.name»Deserializer());
				«ENDFOREACH»
				
				// Add serializers and deserializers for enumerations				
				«FOREACH this.clientDependency.supplier.typeSelect(uml::Package).allOwnedElements().typeSelect(JEAFEnumeration).select(e|e.extensibleEnum).sortBy(e|e.name) AS enum»
				lModule.addSerializer(«enum.fqn()».class, new «enum.packageName()».serializers.«enum.name»Serializer());
				lModule.addDeserializer(«enum.fqn()».class, new «enum.packageName()».serializers.«enum.name»Deserializer());
				«ENDFOREACH»
				
				// Return created module.
				return lModule;
			}
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE GenerateObjectMapperFactory FOR ObjectMapperFactory -»
	«FILE packagePath() + "/" + name + ".java" GenBase»
		«getFileHeader()»
		package «this.packageName()»;
		
		import com.fasterxml.jackson.annotation.JsonAutoDetect;
		import com.fasterxml.jackson.databind.DeserializationFeature;
		import com.fasterxml.jackson.databind.ObjectMapper;
		import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
		import com.fasterxml.jackson.databind.json.JsonMapper;
		import com.fasterxml.jackson.databind.json.JsonMapper.Builder;

		«EXPAND java::Helper::GenerateDeprecationAnnotation-»
		/**
		 * Object Mapper Factory can be used to create a Jackson {@link ObjectMapper} that can be used to serialize and deserialize objects to / from JSON using Jackson. 
		 */
		public class «name» {
			/**
			 * Method creates a ready-to-use Jackson Object Mapper. The created object will be configured so that it matches best to the generated classes. It will also use the serializer modules as it was defined in the UML model.
			 * 
			 * @return {@link ObjectMapper} Created object mapper. The method never returns null.
			 */
			public static ObjectMapper createObjectMapper() {
			    // Create builder for object mappper.
			    Builder lBuilder = JsonMapper.builder();
		
			    // Set default visibilities so that they match to the generated classes that are intended to be serialized using Jackson
			    VisibilityChecker<?> lVisibilityChecker = VisibilityChecker.Std.defaultInstance();
			    lVisibilityChecker = lVisibilityChecker.withFieldVisibility(JsonAutoDetect.Visibility.ANY);
			    lVisibilityChecker = lVisibilityChecker.withGetterVisibility(JsonAutoDetect.Visibility.NONE);
			    lVisibilityChecker = lVisibilityChecker.withIsGetterVisibility(JsonAutoDetect.Visibility.NONE);
			    lVisibilityChecker = lVisibilityChecker.withSetterVisibility(JsonAutoDetect.Visibility.NONE);
			    lVisibilityChecker = lVisibilityChecker.withCreatorVisibility(JsonAutoDetect.Visibility.ANY);
			    lBuilder.visibility(lVisibilityChecker);
		
			    // Configure mapper features
			    lBuilder.disable(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);
		
			    // Create configured modules and add them as well.
			    «FOREACH this.clientDependency.supplier.typeSelect(ModuleFactory) AS moduleFactory»
			    lBuilder.addModule(new «moduleFactory.fqn()»().createModule());
			    «ENDFOREACH»
		
			    // Create object mapper and return it
			    return lBuilder.build();
			}
		}
	«ENDFILE»
«ENDDEFINE»

