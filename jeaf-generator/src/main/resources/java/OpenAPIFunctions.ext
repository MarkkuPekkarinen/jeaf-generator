extension java::Naming;
extension java::GeneratorCommons;

boolean hasOpenAPITypes(JMM::OpenAPI3Specification spec):
	getOpenAPITypes(spec).size > 0;
	
List[JMM::OpenAPIType] getOpenAPITypes(JMM::OpenAPI3Specification spec):
	spec.clientDependency.supplier.typeSelect(uml::Package).ownedElement.typeSelect(JMM::OpenAPIType);
	
boolean hasOpenAPIEnums(JMM::OpenAPI3Specification spec):
	getOpenAPIEnums(spec).size > 0;
	
List[JMM::OpenAPIEnumeration] getOpenAPIEnums(JMM::OpenAPI3Specification spec):
	spec.clientDependency.supplier.typeSelect(uml::Package).ownedElement.typeSelect(JMM::OpenAPIEnumeration);
	
boolean referencesRESTResources(JMM::OpenAPI3Specification spec):
	getRESTResources(spec).size > 0;
	
List[JMM::RESTResource] getRESTResources(JMM::OpenAPI3Specification spec):
	spec.clientDependency.supplier.typeSelect(JMM::RESTResource);
	
List[JMM::RESTOperation] getRESTOperations(JMM::RESTResource service, String pPath):
   service.ownedOperation.typeSelect(JMM::RESTOperation).select(e|e.path == pPath);
   
Set[String] getPaths(JMM::RESTResource service):
   service.ownedOperation.typeSelect(JMM::RESTOperation).path.toSet();
	
String getYAMLStyleComment(uml::Element element, String indentation):
    element.ownedComment.get(0).body.replaceAll("\n", "\n" + indentation + "# ");

String getCommentForOpenAPIDescription(uml::Element element, String indentation):
    element.ownedComment.get(0).body.replaceAll("\n", "\n" + indentation);
    
String getOpenAPIType(uml::Type type):
    JAVA com.anaptecs.jeaf.fwk.generator.util.OpenAPIHelper.getOpenAPIType(org.eclipse.uml2.uml.Type);
    
String getOpenAPIFormat(uml::Type type):
    JAVA com.anaptecs.jeaf.fwk.generator.util.OpenAPIHelper.getOpenAPIFormat(org.eclipse.uml2.uml.Type);
    
boolean hasOpenAPIFormat(uml::Type type):
    getOpenAPIFormat(type) != null;
    
boolean isBasicOpenAPIType(uml::Type type):
    JAVA com.anaptecs.jeaf.fwk.generator.util.OpenAPIHelper.isBasicOpenAPIType(org.eclipse.uml2.uml.Type);
    
boolean registerLocalType(uml::NamedElement localClass):
    JAVA com.anaptecs.jeaf.fwk.generator.util.OpenAPIHelper.registerLocalType(org.eclipse.uml2.uml.NamedElement);
    
List[uml::Class] getAllSubclasses(uml::Class class) :
   JAVA com.anaptecs.jeaf.fwk.generator.util.ClassUtil.getAllSubclasses(org.eclipse.uml2.uml.Class);
   
boolean isTopOfClassHierarchy(uml::Class class) :
   class.superClass.isEmpty == true && getAllSubclasses(class).size > 0;
	
String toOpenAPIContentType(JMM::MediaType mediaType) :
   toOpenAPIContentType(mediaType.toString());
   
String toOpenAPIContentType(String mediaType) :
   JAVA com.anaptecs.jeaf.fwk.generator.util.OpenAPIHelper.toOpenAPIContentType(java.lang.String);
   
boolean isOpenAPIParameterType(uml::Element element):
   getOpenAPIParameterType(element) != null;

String getOpenAPIParameterType(uml::Element param):
   JAVA com.anaptecs.jeaf.fwk.generator.util.OpenAPIHelper.getOpenAPIParameterType(org.eclipse.uml2.uml.Element);
   
List[uml::Parameter] getOpenAPIInputParameters(uml::Operation operation):   
   operation.ownedParameter.select(p| p.isInputParameter() && p.isOpenAPIParameterType());   

boolean hasOpenAPIInputParameters(uml::Operation operation):
   getOpenAPIInputParameters(operation).size > 0;
   
boolean isBeanParamater(uml::Parameter param):
   param.isStereotypeApplied("BeanParam") || param.type.isStereotypeApplied("BeanParam");
   
List[uml::Parameter] getBeanParams(uml::Operation operation):
   operation.ownedParameter.select(e|e.isBeanParamater());
   
boolean hasBeanParameters(uml::Operation operation):
   getBeanParams(operation).size > 0;
   
boolean hasOpenAPIProperties(uml::Class pClass):
   getOpenAPIProperties(pClass).size > 0;
   
List[uml::Property] getOpenAPIProperties(uml::Element class):
   class.ownedElement.select(e|e.isOpenAPIParameterType());
   
boolean isRequired(uml::TypedElement type):
   type.isStereotypeApplied("NotNull") || type.isStereotypeApplied("NotEmpty") || type.isStereotypeApplied("NotBlank") || type.type.isPrimitiveType();
   
// boolean isRequiredParam(uml::Parameter param):   
//   isRequired(param) || param.lower > 0;

// boolean isRequiredAttribute(uml::Property property):   
//   isRequired(property) || property.lower > 0;
List[uml::Property] getRequiredProperties(uml::Class class):
    class.ownedAttribute.select(e|e.isRequired());
    
boolean hasRequiredProperties(uml::Class class):
    getRequiredProperties(class).size > 0;
