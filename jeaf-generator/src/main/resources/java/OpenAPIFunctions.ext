extension java::Naming;
extension java::GeneratorCommons;

boolean hasOpenAPITypes(JMM::OpenAPI3Specification spec):
	getOpenAPITypes(spec).size > 0;
	
List[JMM::OpenAPIType] getOpenAPITypes(JMM::OpenAPI3Specification spec):
	spec.clientDependency.supplier.typeSelect(uml::Package).ownedElement.typeSelect(JMM::OpenAPIType);
	
List[JMM::OpenAPIDataType] getOpenAPIDataTypes(JMM::OpenAPI3Specification spec):
	spec.clientDependency.supplier.typeSelect(uml::Package).ownedElement.typeSelect(JMM::OpenAPIDataType);
	
boolean hasOpenAPISecuritySchemes(JMM::OpenAPI3Specification spec):
    getOpenAPISecuritySchemes(spec).size > 0;
    
List[JMM::OpenAPISecurityScheme] getOpenAPISecuritySchemes(JMM::OpenAPI3Specification spec):
    spec.getModel().allOwnedElements().typeSelect(JMM::OpenAPISecurityScheme).select(e|e.isInGeneratorWhitelist() == true).sortBy(e|e.name);

List[JMM::ErrorResponse] getErrorResponses(JMM::OpenAPI3Specification spec):
	spec.clientDependency.supplier.typeSelect(uml::Package).ownedElement.typeSelect(JMM::ErrorResponse);

List[JMM::OpenAPI3Specification] getDependentSpecs(JMM::OpenAPI3Specification spec):
	spec.clientDependency.supplier.typeSelect(JMM::OpenAPI3Specification);
	
Void registerSpecDependency( uml::Component pSource, uml::Component pTarget, String pReference ):
    JAVA com.anaptecs.jeaf.fwk.generator.util.OpenAPIHelper.registerSpecDependency( org.eclipse.uml2.uml.Component, org.eclipse.uml2.uml.Component, java.lang.String );
	
boolean hasOpenAPIEnums(JMM::OpenAPI3Specification spec):
	getOpenAPIEnums(spec).size > 0;
	
List[JMM::OpenAPIEnumeration] getOpenAPIEnums(JMM::OpenAPI3Specification spec):
	spec.clientDependency.supplier.typeSelect(uml::Package).ownedElement.typeSelect(JMM::OpenAPIEnumeration);
	
boolean referencesRESTResources(JMM::OpenAPI3Specification spec):
	getRESTResources(spec).size > 0;
	
List[JMM::RESTResource] getRESTResources(JMM::OpenAPI3Specification spec):
	spec.clientDependency.supplier.typeSelect(JMM::RESTResource);
	
List[JMM::RESTOperation] getRESTOperations(JMM::RESTResource service, String pPath):
   service.ownedOperation.typeSelect(JMM::RESTOperation).select(e|e.path == pPath);
   
Set[String] getPaths(JMM::RESTResource service):
   service.ownedOperation.typeSelect(JMM::RESTOperation).path.toSet();
	
String getYAMLStyleComment(uml::Element element, String indentation):
    element.ownedComment.get(0).body.replaceAll("\n", "\r\n" + indentation + "# ");

String getCommentForOpenAPIDescription(uml::Element element, String indentation):
    element.ownedComment.get(0).body.replaceAll("\n", "\r\n" + indentation);
    
boolean hasMultiLineComment(uml::Element element) :
    //element.ownedComment.get(0).body.contains("\n");
    true;
    
String getOpenAPIType(uml::Type type, JMM::OpenAPI3Specification spec):
    JAVA com.anaptecs.jeaf.fwk.generator.util.OpenAPIHelper.getOpenAPIType(org.eclipse.uml2.uml.Type, org.eclipse.uml2.uml.Component);
    
String getResponseType(uml::Type type, JMM::OpenAPI3Specification spec):
    JAVA com.anaptecs.jeaf.fwk.generator.util.OpenAPIHelper.getResponseType(org.eclipse.uml2.uml.Type, org.eclipse.uml2.uml.Component);    

String getOpenAPIFormat(uml::Type type):
    JAVA com.anaptecs.jeaf.fwk.generator.util.OpenAPIHelper.getOpenAPIFormat(org.eclipse.uml2.uml.Type);
    
boolean hasOpenAPIFormat(uml::Type type):
    getOpenAPIFormat(type) != null;
    
boolean isBasicOpenAPIType(uml::Type type):
    JAVA com.anaptecs.jeaf.fwk.generator.util.OpenAPIHelper.isBasicOpenAPIType(org.eclipse.uml2.uml.Type);
    
boolean isOpenAPIDataType(uml::Type type):
   isStereotypeApplied(type, "OpenAPIDataType");
   
Void registerLocalType(uml::NamedElement localClass, JMM::OpenAPI3Specification spec):
    JAVA com.anaptecs.jeaf.fwk.generator.util.OpenAPIHelper.registerLocalType(org.eclipse.uml2.uml.NamedElement, org.eclipse.uml2.uml.Component);
    
cached List[uml::Class] getAllSubclasses(uml::Type class) :
   JAVA com.anaptecs.jeaf.fwk.generator.util.ClassUtil.getAllSubclasses(org.eclipse.uml2.uml.Type);
   
cached List[uml::Class] getAllConcreteSubclasses(uml::Type class) :
   class.getAllSubclasses().select(e|e.isAbstract == false);
   
boolean isOneOfForClassHierachieEnabled():
  false;
   
boolean isTopOfClassHierarchy(uml::Class class) :
   class.superClass.isEmpty == true && getAllSubclasses(class).size > 0;
	
String toOpenAPIContentType(JMM::MediaType mediaType) :
   toOpenAPIContentType(mediaType.toString());
   
Set[JMM::MediaType] unifyMediaTypes(Collection[JMM::MediaType] mediaTypes1, Collection[JMM::MediaType] mediaTypes2):
   mediaTypes1.toSet().addAll(mediaTypes2);
   
String toOpenAPIContentType(String mediaType) :
   JAVA com.anaptecs.jeaf.fwk.generator.util.OpenAPIHelper.toOpenAPIContentType(java.lang.String);
   
boolean isOpenAPIParameterType(uml::Element element):
   getOpenAPIParameterType(element) != null;

String getOpenAPIParameterType(uml::Element param):
   JAVA com.anaptecs.jeaf.fwk.generator.util.OpenAPIHelper.getOpenAPIParameterType(org.eclipse.uml2.uml.Element);
   
boolean isOpenAPIInputParameter(uml::Parameter param):
   param.isInputParameter() && param.isOpenAPIParameterType();

List[uml::Parameter] getOpenAPIInputParameters(uml::Operation operation):   
   operation.ownedParameter.select(p| p.isOpenAPIInputParameter());   

boolean hasOpenAPIInputParameters(uml::Operation operation):
   getOpenAPIInputParameters(operation).size > 0;
   
boolean isBeanParamater(uml::Parameter param):
   param.isStereotypeApplied("BeanParam") || param.type.isStereotypeApplied("BeanParam");
   
List[uml::Parameter] getBeanParams(uml::Operation operation):
   operation.ownedParameter.select(e|e.isBeanParamater());
   
boolean inlineBeanParam(uml::Parameter param) :
   if param.type.isStereotypeApplied("BeanParam")
   then ((JMM::BeanParam) param.type).inline
   else true;
   
boolean hasBeanParameters(uml::Operation operation):
   getBeanParams(operation).size > 0;
   
boolean hasOpenAPIProperties(uml::Class pClass):
   getOpenAPIProperties(pClass).size > 0;
   
List[uml::Property] getOpenAPIProperties(uml::Element class):
   class.getAllAttributesFromHierarchy().select(e|e.isOpenAPIParameterType());
   
List[uml::Property] getAllAttributesFromHierarchy(uml::Element class):
  JAVA com.anaptecs.jeaf.fwk.generator.util.OpenAPIHelper.getAllAttributesFromHierarchy(org.eclipse.uml2.uml.Element);
   
   
boolean isRequired(uml::Parameter param):
   param.isStereotypeApplied("NotNull") || param.isStereotypeApplied("NotEmpty") || param.isStereotypeApplied("NotBlank") || param.type.isPrimitiveType()|| param.lower > 0;

boolean isRequiredProperty(uml::Property property):
   property.isStereotypeApplied("NotNull") || property.isStereotypeApplied("NotEmpty") || property.isStereotypeApplied("NotBlank") || (property.lower > 0) || (property.association != null && property.lower > 0) || (property.isMultivalued() && property.lower > 0);
   
List[uml::Property] getRequiredProperties(uml::Class class):
    class.ownedAttribute.select(e|e.isRequiredProperty() && e.isTransient() == false);
    
boolean hasRequiredProperties(uml::Class class):
    getRequiredProperties(class).size > 0;
    
boolean supportsRequestBody(JMM::HTTPMethod httpMethod):
  httpMethod.toString().toLowerCase() == "post" || httpMethod.toString().toLowerCase() == "put" || httpMethod.toString().toLowerCase() == "patch";

boolean hasRequestBody(uml::Operation operation, JMM::HTTPMethod httpMethod):
  getRequestBodyParameters(operation).size == 1  && httpMethod.supportsRequestBody() == true;
  
List[uml::Parameter] getRequestBodyParameters(uml::Operation operation):
  operation.ownedParameter.select(e|e.isInputParameter() && e.isOpenAPIInputParameter() == false && e.isBeanParamater() == false);
  
boolean hasReturnTypeVoid(uml::Operation operation):
  getReturnTypeName(operation) == "void";
  
uml::Parameter getReturnParameter(uml::Operation operation):
  operation.getReturnResult();
  
boolean isNullable(uml::Property property):
  if property.isStereotypeApplied("OpenAPIProperty") 
  then ((JMM::OpenAPIProperty) property).nullable 
  else
    if property.isStereotypeApplied("NotNull")
    then false
    else true;
  
  
boolean isReadOnly(uml::Property property):
  if property.isStereotypeApplied("OpenAPIProperty") 
  then ((JMM::OpenAPIProperty) property).accessType.name == "READ_ONLY" 
  else 
    property.isReadOnly;
  
boolean isWriteOnly(uml::Property property):
  if property.isStereotypeApplied("OpenAPIProperty") then ((JMM::OpenAPIProperty) property).accessType.name == "WRITE_ONLY" else false;
  
String getOperationID(uml::Operation operation, uml::Interface service):
   operation.name;
   
cached String getJAXRSStatusCodeName(String pJMMStatusCode):
  JAVA com.anaptecs.jeaf.fwk.generator.util.OpenAPIHelper.getJAXRSStatusCodeName(java.lang.String);  
  
boolean isJAXRSStatusCode(String pJMMStatusCode):
   getJAXRSStatusCodeName(pJMMStatusCode) != null;
   

cached List[JMM::ErrorResponse] getGlobalDefaultErrorResponses(uml::Model model):
   model.allOwnedElements().typeSelect(JMM::ErrorResponse).select(e|e.globalDefaultErrorResponse ==true);
  
cached JMM::ErrorResponse getGlobalDefaultErrorResponse(uml::Model model):
   getGlobalDefaultErrorResponses(model).first();

boolean hasExactlyOneGlobalDefaultErrorResponse(uml::Model model):
   getGlobalDefaultErrorResponses(model).size==1;
   
boolean hasValidOneGlobalDefaultErrorResponse(uml::Model model):
   getGlobalDefaultErrorResponses(model).size<=1;
   
cached List[JMM::OpenAPIType] getErrorResponseTypes(JMM::ErrorResponse errorResponse):
   errorResponse.clientDependency.supplier.typeSelect(JMM::OpenAPIType);
   
JMM::OpenAPIType getErrorResponseType(JMM::ErrorResponse errorResponse):
   getErrorResponseTypes(errorResponse).first();
   
cached String getErrorCode(JMM::HTTPStatusCode status):
   status.toString().subString(0, 3);
   
List[JMM::ErrorResponse] getCustomErrorResponses(JMM::OpenAPI3Specification spec):
   spec.clientDependency.supplier.typeSelect(JMM::ErrorResponse);
   
JMM::ErrorResponse getCustomErrorResponse(JMM::OpenAPI3Specification spec):
  getCustomErrorResponses(spec).first();
  
cached List[uml::Class] getResponseHeaderGroups(uml::Operation operation) :
  operation.clientDependency.supplier.typeSelect(JMM::ResponseHeaderGroup);
  
cached boolean hasResponseHeaderFields(uml::Operation operation) :
  operation.getResponseHeaderGroups().size > 0; 

boolean hasCustomErrorResponse(JMM::OpenAPI3Specification spec):
  getCustomErrorResponses(spec).size == 1;
  
Set[JMM::OAuthScope] getOAuthScopes(JMM::OpenAPISecurityScheme scheme):
  scheme.clientDependency.supplier.typeSelect(JMM::OAuthFlow).clientDependency.supplier.typeSelect(JMM::OAuthScope).toSet().sortBy(e|e.name);

boolean isOrdered(uml::Element element) :
    isStereotypeApplied(element, "Ordered"); 
    
String getOrderNumber(uml::Element element) :
    if element.isOrdered() == true
    then ((JMM::Ordered) element).order.toString()
    else "9999";  
    
List[uml::Element] getOrderedSchemaElements(JMM::OpenAPI3Specification spec) :
    spec.getOpenAPITypes().addAll(spec.getOpenAPIDataTypes().select(e|e.inline == false)).addAll(spec.getOpenAPIEnums()).toList().sortBy(e|e.name).sortBy(e|e.getOrderNumber());
    
