«IMPORT uml»
«IMPORT JMM»
«EXTENSION java::Naming»
«EXTENSION java::CustomValidationCommons»
«EXTENSION org::openarchitectureware::util::stdlib::io»

«DEFINE OpenAPIRestrictions FOR NamedElement -»
    «FOREACH this.getAppliedStereotypes() AS stereotype -»
	    «IF stereotype.isValidationStereotype() -»
			«IF stereotype.name == "DecimalMin" -»
			  «EXPAND DecimalMinAnnotation FOR ((DecimalMin)this)»
			«ELSEIF stereotype.name == "DecimalMax" -»
			  «EXPAND DecimalMaxAnnotation FOR ((DecimalMax)this)»
			«ELSEIF stereotype.name == "Min" -»
			  «IF this.fqn() == "String" -»
			  «EXPAND MinLengthAnnotation FOR ((Min)this)»
			  «ELSE -»
			  «EXPAND MinValueAnnotation FOR ((Min)this)»
			  «ENDIF -»
			«ELSEIF stereotype.name == "Max" -»
			  «IF this.fqn() == "String" -»
			  «EXPAND MaxLengthAnnotation FOR ((Max)this)»
			  «ELSE -»
			  «EXPAND MaxValueAnnotation FOR ((Max)this)»
			  «ENDIF -»
			«ELSEIF stereotype.name == "Digits" -»
			  «EXPAND DigitsAnnotation FOR ((Digits) this)»
			«ELSEIF stereotype.name == "Negative" -»
			  «EXPAND NegativeAnnotation FOR ((Negative) this)»
			«ELSEIF stereotype.name == "NegativeOrZero" -»
			  «EXPAND NegativeOrZeroAnnotation FOR ((NegativeOrZero) this)»
			«ELSEIF stereotype.name == "PositiveOrZero" -»
			  «EXPAND PositiveOrZeroAnnotation FOR ((PositiveOrZero) this)»
			«ELSEIF stereotype.name == "Positive" -»
			  «EXPAND PositiveAnnotation FOR ((Positive) this)»
			«ELSEIF stereotype.name == "Size" -»
			  «EXPAND SizeAnnotation FOR ((Size) this)»
			«ELSEIF stereotype.name == "Pattern" -»
			  «EXPAND PatternAnnotation FOR ((Pattern) this)»
			«ELSEIF stereotype.name == "Email" -»
			  «EXPAND EmailAnnotation FOR ((Email) this)»
			«ELSEIF stereotype.name == "NotEmpty" -»
			  «EXPAND NotEmptyAnnotation FOR ((NotEmpty) this)»
			«ELSEIF stereotype.name == "Null" -»
			  «EXPAND NullAnnotation FOR ((Null) this)»
			«ELSEIF stereotype.name == "AssertTrue" -»
			  «EXPAND AssertTrueAnnotation FOR ((AssertTrue) this)»
			«ELSEIF stereotype.name == "AssertFalse" -»
			  «EXPAND AssertFalseAnnotation FOR ((AssertFalse) this)»
			«ELSEIF stereotype.name == "NotBlank" -»
			  «EXPAND NotBlankAnnotation FOR ((NotBlank) this)»
			«ELSEIF stereotype.name == "Past" -»
			  «EXPAND PastAnnotation FOR ((Past) this)»
			«ELSEIF stereotype.name == "PastOrPresent" -»
			  «EXPAND PastOrPresentAnnotation FOR ((PastOrPresent) this)»
			«ELSEIF stereotype.name == "FutureOrPresent" -»
			  «EXPAND FutureOrPresentAnnotation FOR ((FutureOrPresent) this)»
			«ELSEIF stereotype.name == "Future" -»
			  «EXPAND FutureAnnotation FOR ((Future) this)»
			«ELSE -»
			«ENDIF -»
	    «ENDIF -»
	«ENDFOREACH -»
«ENDDEFINE»


«DEFINE DecimalMinAnnotation FOR DecimalMin -»
   @javax.validation.constraints.DecimalMin(value = "«this.value»", inclusive = «this.inclusive» «EXPAND ValidationAnnotationBasics» )
«ENDDEFINE»

«DEFINE DecimalMaxAnnotation FOR DecimalMax -»
   @javax.validation.constraints.DecimalMax(value = "«this.value»", inclusive = «this.inclusive» «EXPAND ValidationAnnotationBasics» )
«ENDDEFINE»

«DEFINE MinValueAnnotation FOR Min-»
          minimum: «this.value -»
«ENDDEFINE»

«DEFINE MinLengthAnnotation FOR Min-»
          minLength: «this.value -»
«ENDDEFINE»

«DEFINE MaxValueAnnotation FOR Max -»
          maximum: «this.value -»
«ENDDEFINE»

«DEFINE MaxLengthAnnotation FOR Max -»
          maxLength: «this.value -»
«ENDDEFINE»

«DEFINE DigitsAnnotation FOR Digits -»
   @javax.validation.constraints.Digits(integer = «integer», fraction = «fraction» «EXPAND ValidationAnnotationBasics»)
«ENDDEFINE»

«DEFINE NegativeAnnotation FOR Negative -»
   @javax.validation.constraints.Negative(«EXPAND ValidationAnnotationBasicsEmptyValidation»)
«ENDDEFINE»

«DEFINE NegativeOrZeroAnnotation FOR NegativeOrZero -»
   @javax.validation.constraints.NegativeOrZero(«EXPAND ValidationAnnotationBasicsEmptyValidation»)
«ENDDEFINE»

«DEFINE PositiveOrZeroAnnotation FOR PositiveOrZero -»
   @javax.validation.constraints.PositiveOrZero(«EXPAND ValidationAnnotationBasicsEmptyValidation»)
«ENDDEFINE»

«DEFINE PositiveAnnotation FOR Positive -»
   @javax.validation.constraints.Positive(«EXPAND ValidationAnnotationBasicsEmptyValidation»)
«ENDDEFINE»

«DEFINE SizeAnnotation FOR Size -»
   @javax.validation.constraints.Size(min = «min», max = «max» «EXPAND ValidationAnnotationBasics»)
«ENDDEFINE»

«DEFINE PatternAnnotation FOR Pattern -»
   @javax.validation.constraints.Pattern(«IF regexp.length > 0»regexp = "«regexp»"«ENDIF»«IF regexp.length > 0 && flags.size > 0», «ENDIF»«IF flags.size > 0»flags = {javax.validation.constraints.Pattern.Flag.«flags.toString(", javax.validation.constraints.Pattern.Flag.")»}«ENDIF» «EXPAND ValidationAnnotationBasics»)
«ENDDEFINE»

«DEFINE EmailAnnotation FOR Email -»
   @javax.validation.constraints.Email(«IF regexp.length > 0»regexp = "«regexp»"«ENDIF»«IF regexp.length > 0 && flags.size > 0», «ENDIF»«IF flags.size > 0»flags = {javax.validation.constraints.Pattern.Flag.«flags.toString(", javax.validation.constraints.Pattern.Flag.")»}«ENDIF» «EXPAND ValidationAnnotationBasics»)
«ENDDEFINE»

«DEFINE NotEmptyAnnotation FOR NotEmpty -»
   @javax.validation.constraints.NotEmpty(«EXPAND ValidationAnnotationBasicsEmptyValidation»)
«ENDDEFINE»

«DEFINE NullAnnotation FOR Null -»
   @javax.validation.constraints.Null(«EXPAND ValidationAnnotationBasicsEmptyValidation»)
«ENDDEFINE»

«DEFINE NotNullAnnotation FOR NotNull -»
   @javax.validation.constraints.NotNull(«EXPAND ValidationAnnotationBasicsEmptyValidation»)
«ENDDEFINE»

«DEFINE AssertTrueAnnotation FOR AssertTrue -»
   @javax.validation.constraints.AssertTrue(«EXPAND ValidationAnnotationBasicsEmptyValidation»)
«ENDDEFINE»

«DEFINE AssertFalseAnnotation FOR AssertFalse -»
   @javax.validation.constraints.AssertFalse(«EXPAND ValidationAnnotationBasicsEmptyValidation»)
«ENDDEFINE»

«DEFINE NotBlankAnnotation FOR NotBlank -»
          minLength: 1
«ENDDEFINE»

«DEFINE PastAnnotation FOR Past -»
   @javax.validation.constraints.Past(«EXPAND ValidationAnnotationBasicsEmptyValidation»)
«ENDDEFINE»

«DEFINE PastOrPresentAnnotation FOR PastOrPresent -»
   @javax.validation.constraints.PastOrPresent(«EXPAND ValidationAnnotationBasicsEmptyValidation»)
«ENDDEFINE»

«DEFINE FutureOrPresentAnnotation FOR FutureOrPresent -»
   @javax.validation.constraints.FutureOrPresent(«EXPAND ValidationAnnotationBasicsEmptyValidation»)
«ENDDEFINE»

«DEFINE FutureAnnotation FOR Future -»
   @javax.validation.constraints.Future(«EXPAND ValidationAnnotationBasicsEmptyValidation»)
«ENDDEFINE»

«DEFINE ValidationAnnotationBasics FOR Validation»
«IF errorCode > 0», message = "«errorCode»"«ENDIF» «IF severity.name != "NotUsed"», payload = com.anaptecs.jeaf.tools.api.validation.Severity.«severity.name».class«ENDIF»
«ENDDEFINE»

«DEFINE ValidationAnnotationBasicsEmptyValidation FOR Validation -»
«IF errorCode > 0»message = "«errorCode»"«ENDIF» «IF errorCode > 0 && severity.name != "NotUsed"», «ENDIF» «IF severity.name != "NotUsed"»payload = com.anaptecs.jeaf.tools.api.validation.Severity.«severity.name».class«ENDIF -»
«ENDDEFINE»

