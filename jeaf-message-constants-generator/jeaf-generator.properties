#
# This property file contains all properties that are required to run the JEAF Generator.
#
# The JEAF Generator can also be run without a property file. In this case it will request all parameters in an 
# interactive mode.

# Infos for file header
info.company=anaptecs GmbH, Burgstr. 96, 72764 Reutlingen, Germany
info.author=JEAF Generator
info.copyright=Copyright 2004 - 2019. All rights reserved.
info.version=JEAF Release 1.3

# Working directory from which JEAF Generator will be run. All relative paths will be related to this directory.
basedir=.

# Path to the file that contains the xmi export of the UML model. The has to be exported from MagicDraw UML using its 
# Eclipse UML2 Export v1.x (File - Export To - Eclipse UML2 (v1.0x) XMI File)
path.model.file=

# Directory which contains all xmi files.
path.xmi=

# Directory where all files that belong to the "src" directory will be written to.
path.src=src

# Directory where all files that belong to the "src-gen" directory will be written to.
path.src.gen=src-gen

# Directory where all files that belong to the "res" directory will be written to.
path.res=res

# Directory where all files that belong to the "res-gen" directory will be written to.
path.res.gen=res-gen

# Reference to the file that contains the code-style definition. As sample definition is located in the bin directory.
path.code.style=../anaptecs-convention.xml

# Path to directory that contains all the xml files with the message texts.
path.message.res=res

# Whitelist of packages for the JEAF Generator. Model elements of all packages that match with the white list will be 
# handled by JEAF Generator.
list.pkgs.whitelist=

# List of file names that should be excluded by the message generator.
list.excluded.files=

# Switch defines whether public parts should be generated. Valid values are true and false.
switch.gen.public.parts=

# Switch defines whether service should be generated. Valid values are true and false. 
switch.gen.services=

# Switch defines whether service object should be generated. Valid values are true and false. 
switch.gen.service.objects=

# Switch defines whether domain objects should be generated. Valid values are true and false.
switch.gen.domain.objects=

# Switch defines whether GWT service proxies should be generated. Valid values are true and false. 
switch.gen.gwt.proxies=

# Switch defines whether global parts should be generated. Valid values are true and false.
switch.gen.global.parts=

# Switch defines whether internal parts should be generated. Valid values are true and false.
switch.gen.internal.parts=

# Switch defines whether a JUnit test case for every service should be generated. Valid values are true and false.
switch.gen.junits=

# Switch defines whether the generated set methods for one-to-many associations should be public or not.
switch.gen.public.setters.for.associations=

# Switch defines whether the generated set methods for to-one associations contains checks for null values as parameter.
switch.gen.null.checks.for.to.one.associations.of.service.objects=

# Name of the row within which the OID / primary key will be stored. If the property is not set OID will be used as 
# default.
name.oid.row=

# Name of the row within which the version label of the object will be stored. The version label is used to determine 
# optimistic lock conflicts. If the property is not set VERSION will be used as default.
name.version.label.row=