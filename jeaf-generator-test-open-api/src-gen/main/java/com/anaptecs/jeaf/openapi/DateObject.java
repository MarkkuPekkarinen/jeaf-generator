/*
 * Product Base Definitions
 * This component represents the Open API interface of the accounting service. 
 *
 * OpenAPI spec version: 0.0.1
 * Contact: jeaf@anaptecs.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.anaptecs.jeaf.openapi;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.LocalDate;
import java.time.OffsetDateTime;
/**
 * DateObject
 */


public class DateObject {
  @JsonProperty("localTime")
  private String localTime = null;

  @JsonProperty("localDate")
  private LocalDate localDate = null;

  @JsonProperty("localDateTime")
  private OffsetDateTime localDateTime = null;

  @JsonProperty("calendar")
  private OffsetDateTime calendar = null;

  @JsonProperty("sqlDate")
  private LocalDate sqlDate = null;

  @JsonProperty("utilDate")
  private OffsetDateTime utilDate = null;

  public DateObject localTime(String localTime) {
    this.localTime = localTime;
    return this;
  }

   /**
   * Get localTime
   * @return localTime
  **/
  @Schema(example = "12:07", required = true, description = "")
  public String getLocalTime() {
    return localTime;
  }

  public void setLocalTime(String localTime) {
    this.localTime = localTime;
  }

  public DateObject localDate(LocalDate localDate) {
    this.localDate = localDate;
    return this;
  }

   /**
   * Get localDate
   * @return localDate
  **/
  @Schema(required = true, description = "")
  public LocalDate getLocalDate() {
    return localDate;
  }

  public void setLocalDate(LocalDate localDate) {
    this.localDate = localDate;
  }

  public DateObject localDateTime(OffsetDateTime localDateTime) {
    this.localDateTime = localDateTime;
    return this;
  }

   /**
   * Get localDateTime
   * @return localDateTime
  **/
  @Schema(required = true, description = "")
  public OffsetDateTime getLocalDateTime() {
    return localDateTime;
  }

  public void setLocalDateTime(OffsetDateTime localDateTime) {
    this.localDateTime = localDateTime;
  }

  public DateObject calendar(OffsetDateTime calendar) {
    this.calendar = calendar;
    return this;
  }

   /**
   * Get calendar
   * @return calendar
  **/
  @Schema(required = true, description = "")
  public OffsetDateTime getCalendar() {
    return calendar;
  }

  public void setCalendar(OffsetDateTime calendar) {
    this.calendar = calendar;
  }

  public DateObject sqlDate(LocalDate sqlDate) {
    this.sqlDate = sqlDate;
    return this;
  }

   /**
   * Get sqlDate
   * @return sqlDate
  **/
  @Schema(required = true, description = "")
  public LocalDate getSqlDate() {
    return sqlDate;
  }

  public void setSqlDate(LocalDate sqlDate) {
    this.sqlDate = sqlDate;
  }

  public DateObject utilDate(OffsetDateTime utilDate) {
    this.utilDate = utilDate;
    return this;
  }

   /**
   * Get utilDate
   * @return utilDate
  **/
  @Schema(required = true, description = "")
  public OffsetDateTime getUtilDate() {
    return utilDate;
  }

  public void setUtilDate(OffsetDateTime utilDate) {
    this.utilDate = utilDate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DateObject dateObject = (DateObject) o;
    return Objects.equals(this.localTime, dateObject.localTime) &&
        Objects.equals(this.localDate, dateObject.localDate) &&
        Objects.equals(this.localDateTime, dateObject.localDateTime) &&
        Objects.equals(this.calendar, dateObject.calendar) &&
        Objects.equals(this.sqlDate, dateObject.sqlDate) &&
        Objects.equals(this.utilDate, dateObject.utilDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(localTime, localDate, localDateTime, calendar, sqlDate, utilDate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DateObject {\n");
    
    sb.append("    localTime: ").append(toIndentedString(localTime)).append("\n");
    sb.append("    localDate: ").append(toIndentedString(localDate)).append("\n");
    sb.append("    localDateTime: ").append(toIndentedString(localDateTime)).append("\n");
    sb.append("    calendar: ").append(toIndentedString(calendar)).append("\n");
    sb.append("    sqlDate: ").append(toIndentedString(sqlDate)).append("\n");
    sb.append("    utilDate: ").append(toIndentedString(utilDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
