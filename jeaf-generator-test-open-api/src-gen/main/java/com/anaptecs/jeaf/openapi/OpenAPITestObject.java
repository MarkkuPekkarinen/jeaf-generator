/*
 * Product Base Definitions
 * This component represents the Open API interface of the accounting service. 
 *
 * OpenAPI spec version: 0.0.1
 * Contact: jeaf@anaptecs.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.anaptecs.jeaf.openapi;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * OpenAPITestObject
 */


public class OpenAPITestObject {
  @JsonProperty("readOnlyAttribute")
  private String readOnlyAttribute = null;

  @JsonProperty("readWriteAttribute")
  private String readWriteAttribute = null;

  @JsonProperty("writeOnlyAttribute")
  private Integer writeOnlyAttribute = null;

  @JsonProperty("nullableAttribute")
  private Boolean nullableAttribute = null;

  @JsonProperty("notNullableAttribute")
  private Double notNullableAttribute = null;

  @JsonProperty("readOnlyArray")
  private String readOnlyArray = null;

  @JsonProperty("readWriteArray")
  private String readWriteArray = null;

  @JsonProperty("writeOnlyArray")
  private Integer writeOnlyArray = null;

  @JsonProperty("nullableArray")
  private Double nullableArray = null;

  @JsonProperty("notNullableArray")
  private Double notNullableArray = null;

  public OpenAPITestObject readOnlyAttribute(String readOnlyAttribute) {
    this.readOnlyAttribute = readOnlyAttribute;
    return this;
  }

   /**
   * Get readOnlyAttribute
   * @return readOnlyAttribute
  **/
  @Schema(required = true, description = "")
  public String getReadOnlyAttribute() {
    return readOnlyAttribute;
  }

  public void setReadOnlyAttribute(String readOnlyAttribute) {
    this.readOnlyAttribute = readOnlyAttribute;
  }

  public OpenAPITestObject readWriteAttribute(String readWriteAttribute) {
    this.readWriteAttribute = readWriteAttribute;
    return this;
  }

   /**
   * Get readWriteAttribute
   * @return readWriteAttribute
  **/
  @Schema(required = true, description = "")
  public String getReadWriteAttribute() {
    return readWriteAttribute;
  }

  public void setReadWriteAttribute(String readWriteAttribute) {
    this.readWriteAttribute = readWriteAttribute;
  }

  public OpenAPITestObject writeOnlyAttribute(Integer writeOnlyAttribute) {
    this.writeOnlyAttribute = writeOnlyAttribute;
    return this;
  }

   /**
   * Get writeOnlyAttribute
   * @return writeOnlyAttribute
  **/
  @Schema(required = true, description = "")
  public Integer getWriteOnlyAttribute() {
    return writeOnlyAttribute;
  }

  public void setWriteOnlyAttribute(Integer writeOnlyAttribute) {
    this.writeOnlyAttribute = writeOnlyAttribute;
  }

  public OpenAPITestObject nullableAttribute(Boolean nullableAttribute) {
    this.nullableAttribute = nullableAttribute;
    return this;
  }

   /**
   * Get nullableAttribute
   * @return nullableAttribute
  **/
  @Schema(required = true, description = "")
  public Boolean isNullableAttribute() {
    return nullableAttribute;
  }

  public void setNullableAttribute(Boolean nullableAttribute) {
    this.nullableAttribute = nullableAttribute;
  }

  public OpenAPITestObject notNullableAttribute(Double notNullableAttribute) {
    this.notNullableAttribute = notNullableAttribute;
    return this;
  }

   /**
   * Get notNullableAttribute
   * @return notNullableAttribute
  **/
  @Schema(required = true, description = "")
  public Double getNotNullableAttribute() {
    return notNullableAttribute;
  }

  public void setNotNullableAttribute(Double notNullableAttribute) {
    this.notNullableAttribute = notNullableAttribute;
  }

  public OpenAPITestObject readOnlyArray(String readOnlyArray) {
    this.readOnlyArray = readOnlyArray;
    return this;
  }

   /**
   * Get readOnlyArray
   * @return readOnlyArray
  **/
  @Schema(required = true, description = "")
  public String getReadOnlyArray() {
    return readOnlyArray;
  }

  public void setReadOnlyArray(String readOnlyArray) {
    this.readOnlyArray = readOnlyArray;
  }

  public OpenAPITestObject readWriteArray(String readWriteArray) {
    this.readWriteArray = readWriteArray;
    return this;
  }

   /**
   * Get readWriteArray
   * @return readWriteArray
  **/
  @Schema(required = true, description = "")
  public String getReadWriteArray() {
    return readWriteArray;
  }

  public void setReadWriteArray(String readWriteArray) {
    this.readWriteArray = readWriteArray;
  }

  public OpenAPITestObject writeOnlyArray(Integer writeOnlyArray) {
    this.writeOnlyArray = writeOnlyArray;
    return this;
  }

   /**
   * Get writeOnlyArray
   * @return writeOnlyArray
  **/
  @Schema(required = true, description = "")
  public Integer getWriteOnlyArray() {
    return writeOnlyArray;
  }

  public void setWriteOnlyArray(Integer writeOnlyArray) {
    this.writeOnlyArray = writeOnlyArray;
  }

  public OpenAPITestObject nullableArray(Double nullableArray) {
    this.nullableArray = nullableArray;
    return this;
  }

   /**
   * Get nullableArray
   * @return nullableArray
  **/
  @Schema(required = true, description = "")
  public Double getNullableArray() {
    return nullableArray;
  }

  public void setNullableArray(Double nullableArray) {
    this.nullableArray = nullableArray;
  }

  public OpenAPITestObject notNullableArray(Double notNullableArray) {
    this.notNullableArray = notNullableArray;
    return this;
  }

   /**
   * Get notNullableArray
   * @return notNullableArray
  **/
  @Schema(required = true, description = "")
  public Double getNotNullableArray() {
    return notNullableArray;
  }

  public void setNotNullableArray(Double notNullableArray) {
    this.notNullableArray = notNullableArray;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OpenAPITestObject openAPITestObject = (OpenAPITestObject) o;
    return Objects.equals(this.readOnlyAttribute, openAPITestObject.readOnlyAttribute) &&
        Objects.equals(this.readWriteAttribute, openAPITestObject.readWriteAttribute) &&
        Objects.equals(this.writeOnlyAttribute, openAPITestObject.writeOnlyAttribute) &&
        Objects.equals(this.nullableAttribute, openAPITestObject.nullableAttribute) &&
        Objects.equals(this.notNullableAttribute, openAPITestObject.notNullableAttribute) &&
        Objects.equals(this.readOnlyArray, openAPITestObject.readOnlyArray) &&
        Objects.equals(this.readWriteArray, openAPITestObject.readWriteArray) &&
        Objects.equals(this.writeOnlyArray, openAPITestObject.writeOnlyArray) &&
        Objects.equals(this.nullableArray, openAPITestObject.nullableArray) &&
        Objects.equals(this.notNullableArray, openAPITestObject.notNullableArray);
  }

  @Override
  public int hashCode() {
    return Objects.hash(readOnlyAttribute, readWriteAttribute, writeOnlyAttribute, nullableAttribute, notNullableAttribute, readOnlyArray, readWriteArray, writeOnlyArray, nullableArray, notNullableArray);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OpenAPITestObject {\n");
    
    sb.append("    readOnlyAttribute: ").append(toIndentedString(readOnlyAttribute)).append("\n");
    sb.append("    readWriteAttribute: ").append(toIndentedString(readWriteAttribute)).append("\n");
    sb.append("    writeOnlyAttribute: ").append(toIndentedString(writeOnlyAttribute)).append("\n");
    sb.append("    nullableAttribute: ").append(toIndentedString(nullableAttribute)).append("\n");
    sb.append("    notNullableAttribute: ").append(toIndentedString(notNullableAttribute)).append("\n");
    sb.append("    readOnlyArray: ").append(toIndentedString(readOnlyArray)).append("\n");
    sb.append("    readWriteArray: ").append(toIndentedString(readWriteArray)).append("\n");
    sb.append("    writeOnlyArray: ").append(toIndentedString(writeOnlyArray)).append("\n");
    sb.append("    nullableArray: ").append(toIndentedString(nullableArray)).append("\n");
    sb.append("    notNullableArray: ").append(toIndentedString(notNullableArray)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
