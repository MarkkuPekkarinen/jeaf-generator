/*
 * Product Base Definitions
 * This component represents the Open API interface of the accounting service.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: jeaf@anaptecs.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import openapitools.model.ChildA;
import openapitools.model.ChildAA;
import openapitools.model.ChildB;
import openapitools.model.ChildBB;
import openapitools.model.ParentClass;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import openapitools.JSON;


/**
 * ChildB
 */
@JsonPropertyOrder({
  ChildB.JSON_PROPERTY_CHILD_B_ATTRIBUTE,
  ChildB.JSON_PROPERTY_COMPOSITION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "objectType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = ChildA.class, name = "ChildA"),
  @JsonSubTypes.Type(value = ChildAA.class, name = "ChildAA"),
  @JsonSubTypes.Type(value = ChildB.class, name = "ChildB"),
  @JsonSubTypes.Type(value = ChildBB.class, name = "ChildBB"),
  @JsonSubTypes.Type(value = ParentClass.class, name = "ParentClass"),
})

public class ChildB extends ParentClass {
  public static final String JSON_PROPERTY_CHILD_B_ATTRIBUTE = "childBAttribute";
  private Boolean childBAttribute;

  public static final String JSON_PROPERTY_COMPOSITION = "composition";
  private List<ParentClass> composition = null;

  public ChildB() { 
  }

  public ChildB childBAttribute(Boolean childBAttribute) {
    this.childBAttribute = childBAttribute;
    return this;
  }

   /**
   * Get childBAttribute
   * @return childBAttribute
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_CHILD_B_ATTRIBUTE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getChildBAttribute() {
    return childBAttribute;
  }


  @JsonProperty(JSON_PROPERTY_CHILD_B_ATTRIBUTE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setChildBAttribute(Boolean childBAttribute) {
    this.childBAttribute = childBAttribute;
  }


  public ChildB composition(List<ParentClass> composition) {
    this.composition = composition;
    return this;
  }

  public ChildB addCompositionItem(ParentClass compositionItem) {
    if (this.composition == null) {
      this.composition = new ArrayList<>();
    }
    this.composition.add(compositionItem);
    return this;
  }

   /**
   * Get composition
   * @return composition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_COMPOSITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ParentClass> getComposition() {
    return composition;
  }


  @JsonProperty(JSON_PROPERTY_COMPOSITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setComposition(List<ParentClass> composition) {
    this.composition = composition;
  }


  /**
   * Return true if this ChildB object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChildB childB = (ChildB) o;
    return Objects.equals(this.childBAttribute, childB.childBAttribute) &&
        Objects.equals(this.composition, childB.composition) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(childBAttribute, composition, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChildB {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    childBAttribute: ").append(toIndentedString(childBAttribute)).append("\n");
    sb.append("    composition: ").append(toIndentedString(composition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("ChildA", ChildA.class);
  mappings.put("ChildAA", ChildAA.class);
  mappings.put("ChildB", ChildB.class);
  mappings.put("ChildBB", ChildBB.class);
  mappings.put("ParentClass", ParentClass.class);
  mappings.put("ChildB", ChildB.class);
  JSON.registerDiscriminator(ChildB.class, "objectType", mappings);
}
}

